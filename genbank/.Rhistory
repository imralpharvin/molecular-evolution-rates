dfcytB <- data.frame(seq_name, sequence)
searchTerm <- "cytochrome b[All Fields] AND \"Mammalia\"[Organism]"
numSearch <- 600
searchResult <- entrez_search(db="nuccore", term=searchTerm, retmax=numSearch)
searchResult
tempMin = 1
tempMax = 300
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:tempMax] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n")
while(tempMax != numSearch){
tempMin = tempMin + 300
tempMax = tempMax + 300
if(numSearch <= tempMax ){
tempMax = numSearch
}
#commented out
if(FALSE){
if(tempMin < 798 && tempMax > 798) {
print("stucks")
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:797] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[799: tempMax] ,rettype="fasta")
#write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}else if(tempMax == 798){
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:797] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}
#commented out
}
else{
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:tempMax] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}
}
cytB <- readDNAStringSet("searchSequences.fasta")
seq_name = names(cytB)
sequence = paste(cytB)
dfcytB <- data.frame(seq_name, sequence)
library(ape)
library("Biostrings")
packageVersion("ape")
accessionList <- read.csv("accessionlist.csv")
accessionList <- as.vector(accessionList$accession)
genbankInfo<-read.GenBank(accessionList[1:100],species.names=T)
write.dna(genbankInfo,"cytochromeb.fasta", format="fasta")
cytB <- readDNAStringSet("cytochromeb.fasta")
seq_name = names(cytB)
sequence = paste(cytB)
dfcytB <- data.frame(seq_name, sequence)
####SEARCH TERM####
library(ape)
library("Biostrings")
library (rentrez)
searchTerm <- "cytochrome b[All Fields] AND \"Mammalia\"[Organism]"
numSearch <- 797
searchResult <- entrez_search(db="nuccore", term=searchTerm, retmax=numSearch)
searchResult
tempMin = 1
tempMax = 300
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:tempMax] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n")
while(tempMax != numSearch){
tempMin = tempMin + 300
tempMax = tempMax + 300
if(numSearch <= tempMax ){
tempMax = numSearch
}
#commented out
if(FALSE){
if(tempMin < 798 && tempMax > 798) {
print("stucks")
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:797] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[799: tempMax] ,rettype="fasta")
#write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}else if(tempMax == 798){
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:797] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}
#commented out
}
else{
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:tempMax] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}
}
searchTerm <- "cytochrome b[All Fields] AND \"Mammalia\"[Organism]"
numSearch <- 798
searchResult <- entrez_search(db="nuccore", term=searchTerm, retmax=numSearch)
searchResult
tempMin = 1
tempMax = 300
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:tempMax] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n")
while(tempMax != numSearch){
tempMin = tempMin + 300
tempMax = tempMax + 300
if(numSearch <= tempMax ){
tempMax = numSearch
}
#commented out
if(FALSE){
if(tempMin < 798 && tempMax > 798) {
print("stucks")
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:797] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[799: tempMax] ,rettype="fasta")
#write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}else if(tempMax == 798){
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:797] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}
#commented out
}
else{
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:tempMax] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}
}
searchTerm <- "cytochrome b[All Fields] AND \"Mammalia\"[Organism]"
numSearch <- 1000
searchResult <- entrez_search(db="nuccore", term=searchTerm, retmax=numSearch)
searchResult
tempMin = 1
tempMax = 300
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:tempMax] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n")
while(tempMax != numSearch){
tempMin = tempMin + 300
tempMax = tempMax + 300
if(numSearch <= tempMax ){
tempMax = numSearch
}
#commented out
if(FALSE){
if(tempMin < 798 && tempMax > 798) {
print("stucks")
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:797] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[799: tempMax] ,rettype="fasta")
#write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}else if(tempMax == 798){
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:797] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}
#commented out
}
else{
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:tempMax] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}
}
cytB <- readDNAStringSet("searchSequences.fasta")
seq_name = names(cytB)
sequence = paste(cytB)
dfcytB <- data.frame(seq_name, sequence)
library(bold)
?bold_specimens
load("C:/Users/RalphArvin/Desktop/pantheria/Sec 1 June 14a.RData")
load("C:/Users/RalphArvin/Desktop/pantheria/Sec 1 June 14a.RData")
library(data.table)
# For importing xslx data to data.frame
#install.packages("readxl")
library("readxl")
source("GetTraitSpecificDataBIN.R")
source("GetTraitSpecificData.R")
source("GetTraitInfo.R")
### TRAIT: MEDIAN LATITUDE ###
# Currently, median latitude is the only trait whose information is taken from BOLD. The rest of the data will be obtained from FishBase.
#1. Filtering for presence of a latitude value.
dfLatitudeSpecies <- dfFiltered[grep("[0-9]", lat)]
#2. Convert the latitude (lat) column to number instead of character type
dfLatitudeSpecies[, lat_num := as.numeric(lat)]
#3. Conversion to absolute values before median latitude values are calculated.
dfLatitudeSpecies[, abs_lat_num := abs(lat_num)]
#4. Determine a median latitude for each BIN using absolute values.
dfLatitudeSpecies[, median_lat := median(abs_lat_num), keyby = bin_uri]
#Range
dfLatitudeSpecies[, max_lat := max(lat_num), keyby = bin_uri]
dfLatitudeSpecies[, min_lat := min(lat_num), keyby = bin_uri]
dfLatitudeSpecies[, range_lat := max_lat - min_lat, keyby = bin_uri]
dfLatitudeSpecies <- dfLatitudeSpecies[, !c(14,15,17,18)]
# While considering traits for eventual multivariate analyses, it is necessary for them to have an adequate sample size
# (i.e. over x # rows of data, depending on your purposes). In addition, they should exhibit some amount of variation across the observations.
# Use the GetTraitSpecificDataBIN function to obtain a subset of data for those species that have latitude data available.
#5. Get the trait specific datatable.
dfLatitudeMedian <- setDT(GetTraitSpecificDataBIN(dfLatitudeSpecies, 14))
dfLatitudeRange <- setDT(GetTraitSpecificDataBIN(dfLatitudeSpecies, 15))
setnames(dfLatitudeMedian, "species_label", "species_name")
setnames(dfLatitudeRange, "species_label", "species_name")
#6. Get information for the trait.
GetTraitInfo(dfLatitudeMedian, "median_lat", type = "continuous")
GetTraitInfo(dfLatitudeRange, "range_lat", type = "continuous")
#7. Datatable reorganization for dfFiltered.
dfFiltered <- dfFiltered[, .(bin_uri, filtered_bin_size, recordID, order_name = order_label, family_name = family_label, genus_name = genus_label,
species_name = species_label, nucleotides)]
### TRAIT: PANTHERIA XLSX ###
#1.Reading the data to variable allMammals
rawMammalData <- read_excel("Pantheria.xlsx")
#2.Select traits by column and store it in a vector
selectedTraits <- c("MSW05_Order","MSW05_Family","MSW05_Genus","MSW05_Binomial", "5-1_AdultBodyMass_g","8-1_AdultForearmLen_mm","18-1_BasalMetRate_mLO2hr",  "15-1_LitterSize", "17-1_MaxLongevity_m", "23-1_SexualMaturityAge_d", "10-2_SocialGrpSize","12-1_HabitatBreadth","6-1_DietBreadth", "6-2_TrophicLevel", "1-1_ActivityCycle" )
#3.Filter the original data using the selectedTraits vector as the subset
traitData <- rawMammalData[selectedTraits]
#4.Renaming columns
colnames(traitData) <- c("order", "family", "genus", "species_name", "AdultBodyMass(g)", "AdultForearmLength(mm)", "BasalMetRate(mLO2hr)","LitterSize", "MaxLongevity(months)", "SexualMaturityAge(days)", "SocialGrpSize", "HabitatBreadth", "DietBreadth", "TrophicLevel", "ActivityCycle")
#5.Changing -999 values to NA
traitData[traitData == -999] <- NA
#6 Converting to data table
traitData <- as.data.table(traitData)
traitData <- traitData[,!c(1,2,3)]
#7 Merge Species name
mergedSpecies <- merge(dfFiltered, traitData, by = "species_name")
#7 single row per species
dfFilteredSingle <- dfFiltered[!duplicated(species_name)][, .(bin_uri, species_name, filtered_bin_size)]
load("C:/Users/RalphArvin/Desktop/pantheria/Sec 4 June 15a.RData")
install.packages("ape")
install.packages("phangorn")
install.packages("seqinr")
library(ape)
library(phangorn)
library(seqinr)
library(ape)
library(phangorn)
library(seqinr)
library(ape)
library(phangorn)
library(seqinr)
install.packages("ape")
b
#install.packages("phangorn")
#install.packages("seqinr")
library(ape)
library(phangorn)
#install.packages("phangorn")
#install.packages("seqinr")
library(ape)
#install.packages("ape")
#install.packages("phangorn")
#install.packages("seqinr")
library(ape)
library(phangorn)
library(seqinr)
load("C:/Users/RalphArvin/Desktop/work-s2018/mammals/pantheria/Sec 0 mammal.RData")
View(dfRawSeqs)
load("C:/Users/RalphArvin/Desktop/work-s2018/mammals/pantheria/turtle outgroup/Sec 2 June 19a.R")
load("C:/Users/RalphArvin/Desktop/work-s2018/mammals/pantheria/turtle outgroup/Sec 2 June 19a.R")
load("C:/Users/RalphArvin/Desktop/work-s2018/mammals/pantheria/turtle outgroup/Sec 2 June 20a.RData")
View(dfFiltered)
load("C:/Users/RalphArvin/Desktop/work-s2018/fishbase/Sec 4 June 14.RData")
load("C:/Users/RalphArvin/Desktop/work-s2018/mammals/pantheria/June 22/Sec 2 June 22.RData")
View(dfTraits)
load("C:/Users/RalphArvin/Desktop/work-s2018/mammalsb/June 22/Sec 1 June 22.RData")
load("C:/Users/RalphArvin/Desktop/work-s2018/mammalsb/coi - mammals/Sec 1 June 22.RData")
View(dfFiltered)
View(dfFiltered)
load("C:/Users/RalphArvin/Desktop/work-s2018/mammalsb/June 22/Sec 3 July 04.RData")
colnames(dfTraits)
setwd("C:/Users/RalphArvin/Desktop/work-s2018/genbank")
####NCBI Cytochrome B####
library(ape)
library("Biostrings")
packageVersion("ape")
#install.packages("taxize")
library("taxize")
library(stringr)
library(data.table)
#Read fasta
setwd("C:/Users/RalphArvin/Desktop")
cytB <- readDNAStringSet("16s birds.fasta")
setwd("C:/Users/RalphArvin/Desktop/work-s2018/genbank")
seq_name = names(cytB)
sequence = paste(cytB)
#Put to data frama and convert to data table
df16s <- data.frame(seq_name,  sequence)
df16s <- as.data.table(df16s)
#Split accession number and species name
df16s[, c("accession_number", "genus_label", "species_label") := tstrsplit(seq_name, " ")][split1 == "", seq_name := split2]
df16s$species_name <- do.call(paste, c(df16s[, c("genus_label", "species_label")], sep = " "))
df16s$genus_label <- NULL
df16s$species_label <- NULL
df16s <- df16s[,c("accession_number", "species_name", "sequence")]
#Filter 1: Remove unverified sequences
df16s <- df16s[!species_name %like% "[:]"]
df16s <- df16s[!species_name %like% "[0-9]"]
df16s <- df16s[order(df16s$species_name),]
#Filter 2:
df16s[, c("split1", "split2") := tstrsplit(sequence, "^[-N]+")][split1 == "", sequence := split2]
df16s[, c("split1","split2") := NULL]
df16s[, sequence := tstrsplit(sequence, "[-N]+$")]
#Filter 3: Internal N percent
df16s[, internal_gapN := str_count(sequence, c("[N-]"))]
# Remove sequence if the number of Ns or gaps is greater than 1% (0.01) of the total length of the sequence.
df16s <- df16s[, percentage_gapN := internal_gapN/nchar(sequence)][!percentage_gapN > 0.01]
# Remove these columns as they are no longer needed.
df16s[, c("internal_gapN", "percentage_gapN") := NULL]
#Filter 4: Remove short and long sequences
df16s <- df16s[nchar(gsub("-", "", sequence)) %between% c(500, 1500)]
rm(cytB)
setwd("C:/Users/RalphArvin/Desktop/work-s2018/genbank")
####NCBI Cytochrome B####
library(ape)
library("Biostrings")
packageVersion("ape")
#install.packages("taxize")
library("taxize")
library(stringr)
library(data.table)
#Read fasta
setwd("C:/Users/RalphArvin/Desktop/data")
cytB <- readDNAStringSet("16s birds.fasta")
setwd("C:/Users/RalphArvin/Desktop/work-s2018/genbank")
seq_name = names(cytB)
sequence = paste(cytB)
#Put to data frama and convert to data table
df16s <- data.frame(seq_name,  sequence)
df16s <- as.data.table(df16s)
#Split accession number and species name
df16s[, c("accession_number", "genus_label", "species_label") := tstrsplit(seq_name, " ")][split1 == "", seq_name := split2]
df16s$species_name <- do.call(paste, c(df16s[, c("genus_label", "species_label")], sep = " "))
df16s$genus_label <- NULL
df16s$species_label <- NULL
df16s <- df16s[,c("accession_number", "species_name", "sequence")]
#Filter 1: Remove unverified sequences
df16s <- df16s[!species_name %like% "[:]"]
df16s <- df16s[!species_name %like% "[0-9]"]
df16s <- df16s[order(df16s$species_name),]
#Filter 2:
df16s[, c("split1", "split2") := tstrsplit(sequence, "^[-N]+")][split1 == "", sequence := split2]
df16s[, c("split1","split2") := NULL]
df16s[, sequence := tstrsplit(sequence, "[-N]+$")]
#Filter 3: Internal N percent
df16s[, internal_gapN := str_count(sequence, c("[N-]"))]
# Remove sequence if the number of Ns or gaps is greater than 1% (0.01) of the total length of the sequence.
df16s <- df16s[, percentage_gapN := internal_gapN/nchar(sequence)][!percentage_gapN > 0.01]
# Remove these columns as they are no longer needed.
df16s[, c("internal_gapN", "percentage_gapN") := NULL]
#Filter 4: Remove short and long sequences
df16s <- df16s[nchar(gsub("-", "", sequence)) %between% c(500, 1500)]
rm(cytB)
load("C:/Users/RalphArvin/Desktop/RDATA/coi - birds/Sec 1 coi birds.RData")
setwd("C:/Users/RalphArvin/Desktop/work-s2018/genbank")
####NCBI Cytochrome B####
library(ape)
library("Biostrings")
packageVersion("ape")
#install.packages("taxize")
library("taxize")
library(stringr)
library(data.table)
#Read fasta
setwd("C:/Users/RalphArvin/Desktop/data")
cytB <- readDNAStringSet("16s reptiles.fasta")
setwd("C:/Users/RalphArvin/Desktop/work-s2018/genbank")
seq_name = names(cytB)
sequence = paste(cytB)
#Put to data frama and convert to data table
df16s <- data.frame(seq_name,  sequence)
df16s <- as.data.table(df16s)
#Split accession number and species name
df16s[, c("accession_number", "genus_label", "species_label") := tstrsplit(seq_name, " ")][split1 == "", seq_name := split2]
df16s$species_name <- do.call(paste, c(df16s[, c("genus_label", "species_label")], sep = " "))
df16s$genus_label <- NULL
df16s$species_label <- NULL
df16s <- df16s[,c("accession_number", "species_name", "sequence")]
#Filter 1: Remove unverified sequences
df16s <- df16s[!species_name %like% "[:]"]
df16s <- df16s[!species_name %like% "[0-9]"]
df16s <- df16s[order(df16s$species_name),]
#Filter 2:
df16s[, c("split1", "split2") := tstrsplit(sequence, "^[-N]+")][split1 == "", sequence := split2]
df16s[, c("split1","split2") := NULL]
df16s[, sequence := tstrsplit(sequence, "[-N]+$")]
#Filter 3: Internal N percent
df16s[, internal_gapN := str_count(sequence, c("[N-]"))]
# Remove sequence if the number of Ns or gaps is greater than 1% (0.01) of the total length of the sequence.
df16s <- df16s[, percentage_gapN := internal_gapN/nchar(sequence)][!percentage_gapN > 0.01]
# Remove these columns as they are no longer needed.
df16s[, c("internal_gapN", "percentage_gapN") := NULL]
#Filter 4: Remove short and long sequences
df16s <- df16s[nchar(gsub("-", "", sequence)) %between% c(500, 1500)]
rm(cytB)
load("C:/Users/RalphArvin/Desktop/RDATA/coi - reptiles/Sec 1 coi reptiles.RData")
save.image("C:/Users/RalphArvin/Desktop/RDATA/16s - reptiles/Sec 1 16s reptiles.RData")
setwd("C:/Users/RalphArvin/Desktop/work-s2018/genbank")
####NCBI Cytochrome B####
library(ape)
library("Biostrings")
packageVersion("ape")
#install.packages("taxize")
library("taxize")
library(stringr)
library(data.table)
#Read fasta
setwd("C:/Users/RalphArvin/Desktop/data")
cytB <- readDNAStringSet("16s birds.fasta")
setwd("C:/Users/RalphArvin/Desktop/work-s2018/genbank")
seq_name = names(cytB)
sequence = paste(cytB)
#Put to data frama and convert to data table
df16s <- data.frame(seq_name,  sequence)
df16s <- as.data.table(df16s)
#Split accession number and species name
df16s[, c("accession_number", "genus_label", "species_label") := tstrsplit(seq_name, " ")][split1 == "", seq_name := split2]
df16s$species_name <- do.call(paste, c(df16s[, c("genus_label", "species_label")], sep = " "))
df16s$genus_label <- NULL
df16s$species_label <- NULL
df16s <- df16s[,c("accession_number", "species_name", "sequence")]
#Filter 1: Remove unverified sequences
df16s <- df16s[!species_name %like% "[:]"]
df16s <- df16s[!species_name %like% "[0-9]"]
df16s <- df16s[order(df16s$species_name),]
#Filter 2:
df16s[, c("split1", "split2") := tstrsplit(sequence, "^[-N]+")][split1 == "", sequence := split2]
df16s[, c("split1","split2") := NULL]
df16s[, sequence := tstrsplit(sequence, "[-N]+$")]
#Filter 3: Internal N percent
df16s[, internal_gapN := str_count(sequence, c("[N-]"))]
# Remove sequence if the number of Ns or gaps is greater than 1% (0.01) of the total length of the sequence.
df16s <- df16s[, percentage_gapN := internal_gapN/nchar(sequence)][!percentage_gapN > 0.01]
# Remove these columns as they are no longer needed.
df16s[, c("internal_gapN", "percentage_gapN") := NULL]
#Filter 4: Remove short and long sequences
df16s <- df16s[nchar(gsub("-", "", sequence)) %between% c(500, 1500)]
rm(cytB)
load("C:/Users/RalphArvin/Desktop/RDATA/coi - birds/Sec 1 coi birds.RData")
save.image("C:/Users/RalphArvin/Desktop/RDATA/16s - birds/Sec 1 16s birds.RData")
setwd("C:/Users/RalphArvin/Desktop/work-s2018/genbank")
####NCBI Cytochrome B####
library(ape)
library("Biostrings")
packageVersion("ape")
#install.packages("taxize")
library("taxize")
library(stringr)
library(data.table)
#Read fasta
setwd("C:/Users/RalphArvin/Desktop/data")
cytB <- readDNAStringSet("cytb birds.fasta")
setwd("C:/Users/RalphArvin/Desktop/work-s2018/genbank")
seq_name = names(cytB)
sequence = paste(cytB)
#Put to data frama and convert to data table
dfcytB <- data.frame(seq_name,  sequence)
dfcytB <- as.data.table(dfcytB)
#Split accession number and species name
dfcytB[, c("accession_number", "genus_label", "species_label") := tstrsplit(seq_name, " ")][split1 == "", seq_name := split2]
dfcytB$species_name <- do.call(paste, c(dfcytB[, c("genus_label", "species_label")], sep = " "))
dfcytB$genus_label <- NULL
dfcytB$species_label <- NULL
dfcytB <- dfcytB[,c("accession_number", "species_name", "sequence")]
#Filter 1: Remove unverified sequences
dfcytB <- dfcytB[!species_name %like% "[:]"]
dfcytB <- dfcytB[!species_name %like% "[0-9]"]
dfcytB <- dfcytB[order(dfcytB$species_name),]
#Filter 2:
dfcytB[, c("split1", "split2") := tstrsplit(sequence, "^[-N]+")][split1 == "", sequence := split2]
dfcytB[, c("split1","split2") := NULL]
dfcytB[, sequence := tstrsplit(sequence, "[-N]+$")]
#Filter 3: Internal N percent
dfcytB[, internal_gapN := str_count(sequence, c("[N-]"))]
# Remove sequence if the number of Ns or gaps is greater than 1% (0.01) of the total length of the sequence.
dfcytB <- dfcytB[, percentage_gapN := internal_gapN/nchar(sequence)][!percentage_gapN > 0.01]
# Remove these columns as they are no longer needed.
dfcytB[, c("internal_gapN", "percentage_gapN") := NULL]
#Filter 4: Remove short and long sequences
dfcytB <- dfcytB[nchar(gsub("-", "", sequence)) %between% c(500, 1500)]
rm(cytB)
load("C:/Users/RalphArvin/Desktop/RDATA/coi - birds/Sec 1 coi birds.RData")
save.image("C:/Users/RalphArvin/Desktop/RDATA/cytb - birds/Sec 1 cytb birds.RData")
setwd("C:/Users/RalphArvin/Desktop/work-s2018/genbank")
####NCBI Cytochrome B####
library(ape)
library("Biostrings")
packageVersion("ape")
#install.packages("taxize")
library("taxize")
library(stringr)
library(data.table)
#Read fasta
setwd("C:/Users/RalphArvin/Desktop/data")
cytB <- readDNAStringSet("cytb reptiles.fasta")
setwd("C:/Users/RalphArvin/Desktop/work-s2018/genbank")
seq_name = names(cytB)
sequence = paste(cytB)
#Put to data frama and convert to data table
dfcytB <- data.frame(seq_name,  sequence)
dfcytB <- as.data.table(dfcytB)
#Split accession number and species name
dfcytB[, c("accession_number", "genus_label", "species_label") := tstrsplit(seq_name, " ")][split1 == "", seq_name := split2]
dfcytB$species_name <- do.call(paste, c(dfcytB[, c("genus_label", "species_label")], sep = " "))
dfcytB$genus_label <- NULL
dfcytB$species_label <- NULL
dfcytB <- dfcytB[,c("accession_number", "species_name", "sequence")]
#Filter 1: Remove unverified sequences
dfcytB <- dfcytB[!species_name %like% "[:]"]
dfcytB <- dfcytB[!species_name %like% "[0-9]"]
dfcytB <- dfcytB[order(dfcytB$species_name),]
#Filter 2:
dfcytB[, c("split1", "split2") := tstrsplit(sequence, "^[-N]+")][split1 == "", sequence := split2]
dfcytB[, c("split1","split2") := NULL]
dfcytB[, sequence := tstrsplit(sequence, "[-N]+$")]
#Filter 3: Internal N percent
dfcytB[, internal_gapN := str_count(sequence, c("[N-]"))]
# Remove sequence if the number of Ns or gaps is greater than 1% (0.01) of the total length of the sequence.
dfcytB <- dfcytB[, percentage_gapN := internal_gapN/nchar(sequence)][!percentage_gapN > 0.01]
# Remove these columns as they are no longer needed.
dfcytB[, c("internal_gapN", "percentage_gapN") := NULL]
#Filter 4: Remove short and long sequences
dfcytB <- dfcytB[nchar(gsub("-", "", sequence)) %between% c(500, 1500)]
rm(cytB)
load("C:/Users/RalphArvin/Desktop/RDATA/coi - reptiles/Sec 1 coi reptiles.RData")
save.image("C:/Users/RalphArvin/Desktop/RDATA/cytb - reptiles/Sec 1 cytb reptiles.RData")
