}
else{
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:tempMax] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}
}
cytB <- readDNAStringSet("searchSequences.fasta")
seq_name = names(cytB)
sequence = paste(cytB)
dfcytB <- data.frame(seq_name, sequence)
library(ape)
library("Biostrings")
packageVersion("ape")
accessionList <- read.csv("accessionlist.csv")
accessionList <- as.vector(accessionList$accession)
genbankInfo<-read.GenBank(accessionList[1:100],species.names=T)
write.dna(genbankInfo,"cytochromeb.fasta", format="fasta")
cytB <- readDNAStringSet("cytochromeb.fasta")
seq_name = names(cytB)
sequence = paste(cytB)
dfcytB <- data.frame(seq_name, sequence)
####SEARCH TERM####
library(ape)
library("Biostrings")
library (rentrez)
searchTerm <- "cytochrome b[All Fields] AND \"Mammalia\"[Organism]"
numSearch <- 797
searchResult <- entrez_search(db="nuccore", term=searchTerm, retmax=numSearch)
searchResult
tempMin = 1
tempMax = 300
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:tempMax] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n")
while(tempMax != numSearch){
tempMin = tempMin + 300
tempMax = tempMax + 300
if(numSearch <= tempMax ){
tempMax = numSearch
}
#commented out
if(FALSE){
if(tempMin < 798 && tempMax > 798) {
print("stucks")
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:797] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[799: tempMax] ,rettype="fasta")
#write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}else if(tempMax == 798){
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:797] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}
#commented out
}
else{
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:tempMax] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}
}
searchTerm <- "cytochrome b[All Fields] AND \"Mammalia\"[Organism]"
numSearch <- 798
searchResult <- entrez_search(db="nuccore", term=searchTerm, retmax=numSearch)
searchResult
tempMin = 1
tempMax = 300
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:tempMax] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n")
while(tempMax != numSearch){
tempMin = tempMin + 300
tempMax = tempMax + 300
if(numSearch <= tempMax ){
tempMax = numSearch
}
#commented out
if(FALSE){
if(tempMin < 798 && tempMax > 798) {
print("stucks")
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:797] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[799: tempMax] ,rettype="fasta")
#write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}else if(tempMax == 798){
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:797] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}
#commented out
}
else{
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:tempMax] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}
}
searchTerm <- "cytochrome b[All Fields] AND \"Mammalia\"[Organism]"
numSearch <- 1000
searchResult <- entrez_search(db="nuccore", term=searchTerm, retmax=numSearch)
searchResult
tempMin = 1
tempMax = 300
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:tempMax] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n")
while(tempMax != numSearch){
tempMin = tempMin + 300
tempMax = tempMax + 300
if(numSearch <= tempMax ){
tempMax = numSearch
}
#commented out
if(FALSE){
if(tempMin < 798 && tempMax > 798) {
print("stucks")
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:797] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[799: tempMax] ,rettype="fasta")
#write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}else if(tempMax == 798){
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:797] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}
#commented out
}
else{
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:tempMax] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}
}
cytB <- readDNAStringSet("searchSequences.fasta")
seq_name = names(cytB)
sequence = paste(cytB)
dfcytB <- data.frame(seq_name, sequence)
library(bold)
?bold_specimens
load("C:/Users/RalphArvin/Desktop/pantheria/Sec 1 June 14a.RData")
load("C:/Users/RalphArvin/Desktop/pantheria/Sec 1 June 14a.RData")
library(data.table)
# For importing xslx data to data.frame
#install.packages("readxl")
library("readxl")
source("GetTraitSpecificDataBIN.R")
source("GetTraitSpecificData.R")
source("GetTraitInfo.R")
### TRAIT: MEDIAN LATITUDE ###
# Currently, median latitude is the only trait whose information is taken from BOLD. The rest of the data will be obtained from FishBase.
#1. Filtering for presence of a latitude value.
dfLatitudeSpecies <- dfFiltered[grep("[0-9]", lat)]
#2. Convert the latitude (lat) column to number instead of character type
dfLatitudeSpecies[, lat_num := as.numeric(lat)]
#3. Conversion to absolute values before median latitude values are calculated.
dfLatitudeSpecies[, abs_lat_num := abs(lat_num)]
#4. Determine a median latitude for each BIN using absolute values.
dfLatitudeSpecies[, median_lat := median(abs_lat_num), keyby = bin_uri]
#Range
dfLatitudeSpecies[, max_lat := max(lat_num), keyby = bin_uri]
dfLatitudeSpecies[, min_lat := min(lat_num), keyby = bin_uri]
dfLatitudeSpecies[, range_lat := max_lat - min_lat, keyby = bin_uri]
dfLatitudeSpecies <- dfLatitudeSpecies[, !c(14,15,17,18)]
# While considering traits for eventual multivariate analyses, it is necessary for them to have an adequate sample size
# (i.e. over x # rows of data, depending on your purposes). In addition, they should exhibit some amount of variation across the observations.
# Use the GetTraitSpecificDataBIN function to obtain a subset of data for those species that have latitude data available.
#5. Get the trait specific datatable.
dfLatitudeMedian <- setDT(GetTraitSpecificDataBIN(dfLatitudeSpecies, 14))
dfLatitudeRange <- setDT(GetTraitSpecificDataBIN(dfLatitudeSpecies, 15))
setnames(dfLatitudeMedian, "species_label", "species_name")
setnames(dfLatitudeRange, "species_label", "species_name")
#6. Get information for the trait.
GetTraitInfo(dfLatitudeMedian, "median_lat", type = "continuous")
GetTraitInfo(dfLatitudeRange, "range_lat", type = "continuous")
#7. Datatable reorganization for dfFiltered.
dfFiltered <- dfFiltered[, .(bin_uri, filtered_bin_size, recordID, order_name = order_label, family_name = family_label, genus_name = genus_label,
species_name = species_label, nucleotides)]
### TRAIT: PANTHERIA XLSX ###
#1.Reading the data to variable allMammals
rawMammalData <- read_excel("Pantheria.xlsx")
#2.Select traits by column and store it in a vector
selectedTraits <- c("MSW05_Order","MSW05_Family","MSW05_Genus","MSW05_Binomial", "5-1_AdultBodyMass_g","8-1_AdultForearmLen_mm","18-1_BasalMetRate_mLO2hr",  "15-1_LitterSize", "17-1_MaxLongevity_m", "23-1_SexualMaturityAge_d", "10-2_SocialGrpSize","12-1_HabitatBreadth","6-1_DietBreadth", "6-2_TrophicLevel", "1-1_ActivityCycle" )
#3.Filter the original data using the selectedTraits vector as the subset
traitData <- rawMammalData[selectedTraits]
#4.Renaming columns
colnames(traitData) <- c("order", "family", "genus", "species_name", "AdultBodyMass(g)", "AdultForearmLength(mm)", "BasalMetRate(mLO2hr)","LitterSize", "MaxLongevity(months)", "SexualMaturityAge(days)", "SocialGrpSize", "HabitatBreadth", "DietBreadth", "TrophicLevel", "ActivityCycle")
#5.Changing -999 values to NA
traitData[traitData == -999] <- NA
#6 Converting to data table
traitData <- as.data.table(traitData)
traitData <- traitData[,!c(1,2,3)]
#7 Merge Species name
mergedSpecies <- merge(dfFiltered, traitData, by = "species_name")
#7 single row per species
dfFilteredSingle <- dfFiltered[!duplicated(species_name)][, .(bin_uri, species_name, filtered_bin_size)]
load("C:/Users/RalphArvin/Desktop/pantheria/Sec 4 June 15a.RData")
install.packages("ape")
install.packages("phangorn")
install.packages("seqinr")
library(ape)
library(phangorn)
library(seqinr)
library(ape)
library(phangorn)
library(seqinr)
library(ape)
library(phangorn)
library(seqinr)
install.packages("ape")
b
#install.packages("phangorn")
#install.packages("seqinr")
library(ape)
library(phangorn)
#install.packages("phangorn")
#install.packages("seqinr")
library(ape)
#install.packages("ape")
#install.packages("phangorn")
#install.packages("seqinr")
library(ape)
library(phangorn)
library(seqinr)
load("C:/Users/RalphArvin/Desktop/work-s2018/mammals/pantheria/Sec 0 mammal.RData")
View(dfRawSeqs)
load("C:/Users/RalphArvin/Desktop/work-s2018/mammals/pantheria/turtle outgroup/Sec 2 June 19a.R")
load("C:/Users/RalphArvin/Desktop/work-s2018/mammals/pantheria/turtle outgroup/Sec 2 June 19a.R")
load("C:/Users/RalphArvin/Desktop/work-s2018/mammals/pantheria/turtle outgroup/Sec 2 June 20a.RData")
View(dfFiltered)
load("C:/Users/RalphArvin/Desktop/work-s2018/fishbase/Sec 4 June 14.RData")
load("C:/Users/RalphArvin/Desktop/work-s2018/mammals/pantheria/June 22/Sec 2 June 22.RData")
View(dfTraits)
load("C:/Users/RalphArvin/Desktop/work-s2018/mammalsb/June 22/Sec 1 June 22.RData")
load("C:/Users/RalphArvin/Desktop/work-s2018/mammalsb/coi - mammals/Sec 1 June 22.RData")
View(dfFiltered)
View(dfFiltered)
load("C:/Users/RalphArvin/Desktop/work-s2018/mammalsb/June 22/Sec 3 July 04.RData")
colnames(dfTraits)
load("C:/Users/RalphArvin/Desktop/RDATA/coi - mammals/Sec 4b.RData")
setwd("C:/Users/RalphArvin/Desktop/work-s2018/mammalsb/rscripts")
library(data.table)
# For phylogenetic tree manipulation and analysis:
#install.packages("adephylo")
library(adephylo)
#install.packages("ape")
library(ape)
#install.packages("caper")
library(caper)
#install.packages("phytools")
library(phytools)
# For statistical analysis/graphs:
#install.packages("car")
library(car)
#install.packages("plotly")
library(plotly)
#install.packages("Rmisc")
library(Rmisc)
# Load the function(s) designed for this script:
#install.packages("devtools")
library(devtools)
#install_github("helixcn/phylotools")
library(phylotools)
source("GetTraitInfo.R")
source("TestPhyloSig.R")
source("PGLS.R")
source("MergeAndPGLS.R")
mainTree <- read.tree(file = "bootstrap_example.tree")
temp <- 1
while( temp <= length(mainTree$tip.label)){
mainTree$tip.label[temp] <- dfCentroidSeqsNO$species_name[as.numeric(mainTree$tip.label[temp])]
temp = temp + 1;
}
# Root the tree using your chosen outgroup species.
mainTree <- root(mainTree, outgroup = "Tachyglossus aculeatus", resolve.root = T)
### TRAIT: NUMBER OF NODES.
# Match mainTree with data subset. This will ensure the tree has only the tips we need for data analysis.
dfTraits <- dfTraits[match(mainTree$tip.label, dfTraits$species_name), ]
dfTraits[, number_of_nodes := distRoot(mainTree, method = "nNodes")]
### TRAIT: BRANCH LENGTHS.
# Let's calculate the sum of branch lengths now (from root to tip). These values will serve as our measurement of molecular evolution rate.
dfTraits[, branch_length := distRoot(mainTree, method = "patristic")]
# Get info about the branch lengths.
GetTraitInfo(dfTraits$branch_length)
# Range within which 95% of the values fall.
quantile(dfTraits$branch_length, probs = c(.025, .975))
# Take a closer look at branch length outliers. Some contaminated sequences might have STILL gotten through, so it is best to check!
# Using the IQR to detect statistical outliers.
lowerQuantile <- quantile(dfTraits$branch_length)[2]
upperQuantile <- quantile(dfTraits$branch_length)[4]
iqr <- upperQuantile - lowerQuantile
upperThreshold <- (iqr * 3) + upperQuantile
lowerThreshold <-  lowerQuantile - (iqr * 3)
# Extreme short branches.
dfShort <- dfTraits[branch_length < lowerThreshold][, c(1, 50:51)]
# Get the sequence information in case you want to BLAST the sequence (also, we aren't interested in outgroup species here,
# that's why we are using dfCentroidSeqsNO).
dfShort <- merge(dfShort, dfCentroidSeqsNO, by = "species_name")
# Do the same for the extreme long branches.
dfLong <- dfTraits[branch_length > upperThreshold][, c(1, 50:51)]
dfLong <- merge(dfLong, dfCentroidSeqsNO, by = "species_name")
# Remove from dataset, if desired.
dfTraits <- RemoveSequences(dfTraits, c(dfShort$species_name, dfLong$species_name))
### SINGLE VARIABLE REGRESSION ANALYSIS ###
# Running a single variable PGLS regression analysis for each trait to determine whether significance can be detected. If so, they will be included
# in the multivariable regression model selection process.
# First, make sure the trait data and phylo tree match (in case species were removed).
mainTree <- drop.tip(phy = mainTree, tip = mainTree$tip.label[!mainTree$tip.label %in% dfTraits$species_name])
dfTraits <- dfTraits[match(mainTree$tip.label, dfTraits$species_name), ]
### SINGLE-VARIABLE PGLS ANALYSES ###
# Use the PGLS function to perform single-variable (with number of nodes as a control variable) for all of the traits.
# e.g. branch_length ~ trait_of_interest + number_of_nodes
# We will do this by looping through all of the columns containing the trait data using lapply.
traits <- as.list(colnames(dfTraits[,4:29,31:44]))
# Set to dataframe.
dfTraits <- as.data.frame(dfTraits)
# Start the loop.
singleVarResults <- lapply(traits, function(x) {
# We only want the columns containing species name and dependent and independent variables.
data <- dfTraits[, c("species_name", x, "branch_length", "number_of_nodes")]
# Remove NA values.
data <- data[complete.cases(data), ]
# Perform PGLS. The trait of interest in this case will always be the 2nd column.
caper <- PGLS(data, mainTree, branch_length ~ data[, 2] + number_of_nodes)
# Take the summary of the results.
caperSum <- summary(caper)
})
load("C:/Users/RalphArvin/Desktop/RDATA/coi - mammals/Sec 4b.RData")
mainTree <- read.tree(file = "bootstrap_example.tree")
temp <- 1
while( temp <= length(mainTree$tip.label)){
mainTree$tip.label[temp] <- dfCentroidSeqsNO$species_name[as.numeric(mainTree$tip.label[temp])]
temp = temp + 1;
}
# Root the tree using your chosen outgroup species.
mainTree <- root(mainTree, outgroup = "Tachyglossus aculeatus", resolve.root = T)
### TRAIT: NUMBER OF NODES.
# Match mainTree with data subset. This will ensure the tree has only the tips we need for data analysis.
dfTraits <- dfTraits[match(mainTree$tip.label, dfTraits$species_name), ]
dfTraits[, number_of_nodes := distRoot(mainTree, method = "nNodes")]
### TRAIT: BRANCH LENGTHS.
# Let's calculate the sum of branch lengths now (from root to tip). These values will serve as our measurement of molecular evolution rate.
dfTraits[, branch_length := distRoot(mainTree, method = "patristic")]
# Get info about the branch lengths.
GetTraitInfo(dfTraits$branch_length)
# Range within which 95% of the values fall.
quantile(dfTraits$branch_length, probs = c(.025, .975))
# Take a closer look at branch length outliers. Some contaminated sequences might have STILL gotten through, so it is best to check!
# Using the IQR to detect statistical outliers.
lowerQuantile <- quantile(dfTraits$branch_length)[2]
upperQuantile <- quantile(dfTraits$branch_length)[4]
iqr <- upperQuantile - lowerQuantile
upperThreshold <- (iqr * 3) + upperQuantile
lowerThreshold <-  lowerQuantile - (iqr * 3)
# Extreme short branches.
dfShort <- dfTraits[branch_length < lowerThreshold][, c(1, 50:51)]
# Get the sequence information in case you want to BLAST the sequence (also, we aren't interested in outgroup species here,
# that's why we are using dfCentroidSeqsNO).
dfShort <- merge(dfShort, dfCentroidSeqsNO, by = "species_name")
# Do the same for the extreme long branches.
dfLong <- dfTraits[branch_length > upperThreshold][, c(1, 50:51)]
dfLong <- merge(dfLong, dfCentroidSeqsNO, by = "species_name")
# Remove from dataset, if desired.
dfTraits <- RemoveSequences(dfTraits, c(dfShort$species_name, dfLong$species_name))
### SINGLE VARIABLE REGRESSION ANALYSIS ###
# Running a single variable PGLS regression analysis for each trait to determine whether significance can be detected. If so, they will be included
# in the multivariable regression model selection process.
# First, make sure the trait data and phylo tree match (in case species were removed).
mainTree <- drop.tip(phy = mainTree, tip = mainTree$tip.label[!mainTree$tip.label %in% dfTraits$species_name])
dfTraits <- dfTraits[match(mainTree$tip.label, dfTraits$species_name), ]
### SINGLE-VARIABLE PGLS ANALYSES ###
# Use the PGLS function to perform single-variable (with number of nodes as a control variable) for all of the traits.
# e.g. branch_length ~ trait_of_interest + number_of_nodes
# We will do this by looping through all of the columns containing the trait data using lapply.
traits <- as.list(colnames(dfTraits[,c(4:29,31:44)]))
# Set to dataframe.
dfTraits <- as.data.frame(dfTraits)
# Start the loop.
singleVarResults <- lapply(traits, function(x) {
# We only want the columns containing species name and dependent and independent variables.
data <- dfTraits[, c("species_name", x, "branch_length", "number_of_nodes")]
# Remove NA values.
data <- data[complete.cases(data), ]
# Perform PGLS. The trait of interest in this case will always be the 2nd column.
caper <- PGLS(data, mainTree, branch_length ~ data[, 2] + number_of_nodes)
# Take the summary of the results.
caperSum <- summary(caper)
})
# Assign names to the list of results based on the trait of interest.
names(singleVarResults) <- traits
# Which traits have p-values 0.15 or below?
# For now, this is only taking the first p-value of the trait (I still need to change it to deal with multi-level factors).
sigVars <- lapply(singleVarResults, function(x) (x$coefficients[2,4]))
names(sigVars) <- names(singleVarResults)
# Which are below 0.15?
keepVars <- names(which(sigVars <= 0.15))
keepVars <- c("species_name", "branch_length", "number_of_nodes", keepVars)
source("PGLS.R")
library(data.table)
# For phylogenetic tree manipulation and analysis:
#install.packages("adephylo")
library(adephylo)
#install.packages("ape")
library(ape)
#install.packages("caper")
library(caper)
#install.packages("phytools")
library(phytools)
# For statistical analysis/graphs:
#install.packages("car")
library(car)
#install.packages("plotly")
library(plotly)
#install.packages("Rmisc")
library(Rmisc)
# Load the function(s) designed for this script:
#install.packages("devtools")
library(devtools)
#install_github("helixcn/phylotools")
library(phylotools)
source("GetTraitInfo.R")
source("TestPhyloSig.R")
source("PGLS.R")
source("MergeAndPGLS.R")
#################################################
load("C:/Users/RalphArvin/Desktop/RDATA/coi - mammals/Sec 4b.RData")
mainTree <- read.tree(file = "bootstrap_example.tree")
temp <- 1
while( temp <= length(mainTree$tip.label)){
mainTree$tip.label[temp] <- dfCentroidSeqsNO$species_name[as.numeric(mainTree$tip.label[temp])]
temp = temp + 1;
}
# Root the tree using your chosen outgroup species.
mainTree <- root(mainTree, outgroup = "Tachyglossus aculeatus", resolve.root = T)
### TRAIT: NUMBER OF NODES.
# Match mainTree with data subset. This will ensure the tree has only the tips we need for data analysis.
dfTraits <- dfTraits[match(mainTree$tip.label, dfTraits$species_name), ]
dfTraits[, number_of_nodes := distRoot(mainTree, method = "nNodes")]
### TRAIT: BRANCH LENGTHS.
# Let's calculate the sum of branch lengths now (from root to tip). These values will serve as our measurement of molecular evolution rate.
dfTraits[, branch_length := distRoot(mainTree, method = "patristic")]
# Get info about the branch lengths.
GetTraitInfo(dfTraits$branch_length)
# Range within which 95% of the values fall.
quantile(dfTraits$branch_length, probs = c(.025, .975))
# Take a closer look at branch length outliers. Some contaminated sequences might have STILL gotten through, so it is best to check!
# Using the IQR to detect statistical outliers.
lowerQuantile <- quantile(dfTraits$branch_length)[2]
upperQuantile <- quantile(dfTraits$branch_length)[4]
iqr <- upperQuantile - lowerQuantile
upperThreshold <- (iqr * 3) + upperQuantile
lowerThreshold <-  lowerQuantile - (iqr * 3)
# Extreme short branches.
dfShort <- dfTraits[branch_length < lowerThreshold][, c(1, 50:51)]
# Get the sequence information in case you want to BLAST the sequence (also, we aren't interested in outgroup species here,
# that's why we are using dfCentroidSeqsNO).
dfShort <- merge(dfShort, dfCentroidSeqsNO, by = "species_name")
# Do the same for the extreme long branches.
dfLong <- dfTraits[branch_length > upperThreshold][, c(1, 50:51)]
dfLong <- merge(dfLong, dfCentroidSeqsNO, by = "species_name")
# Remove from dataset, if desired.
dfTraits <- RemoveSequences(dfTraits, c(dfShort$species_name, dfLong$species_name))
### SINGLE VARIABLE REGRESSION ANALYSIS ###
# Running a single variable PGLS regression analysis for each trait to determine whether significance can be detected. If so, they will be included
# in the multivariable regression model selection process.
# First, make sure the trait data and phylo tree match (in case species were removed).
mainTree <- drop.tip(phy = mainTree, tip = mainTree$tip.label[!mainTree$tip.label %in% dfTraits$species_name])
dfTraits <- dfTraits[match(mainTree$tip.label, dfTraits$species_name), ]
### SINGLE-VARIABLE PGLS ANALYSES ###
# Use the PGLS function to perform single-variable (with number of nodes as a control variable) for all of the traits.
# e.g. branch_length ~ trait_of_interest + number_of_nodes
# We will do this by looping through all of the columns containing the trait data using lapply.
traits <- as.list(colnames(dfTraits[,c(4:29,31:44)]))
# Set to dataframe.
dfTraits <- as.data.frame(dfTraits)
# Start the loop.
singleVarResults <- lapply(traits, function(x) {
# We only want the columns containing species name and dependent and independent variables.
data <- dfTraits[, c("species_name", x, "branch_length", "number_of_nodes")]
# Remove NA values.
data <- data[complete.cases(data), ]
# Perform PGLS. The trait of interest in this case will always be the 2nd column.
caper <- PGLS(data, mainTree, branch_length ~ data[, 2] + number_of_nodes)
# Take the summary of the results.
caperSum <- summary(caper)
})
# Assign names to the list of results based on the trait of interest.
names(singleVarResults) <- traits
# Which traits have p-values 0.15 or below?
# For now, this is only taking the first p-value of the trait (I still need to change it to deal with multi-level factors).
sigVars <- lapply(singleVarResults, function(x) (x$coefficients[2,4]))
names(sigVars) <- names(singleVarResults)
# Which are below 0.15?
keepVars <- names(which(sigVars <= 0.15))
keepVars <- c("species_name", "branch_length", "number_of_nodes", keepVars)
setwd("C:/Users/RalphArvin/Desktop/work-s2018/mammalsb/rscripts")
library(data.table)
# For phylogenetic tree manipulation and analysis:
#install.packages("adephylo")
library(adephylo)
#install.packages("ape")
library(ape)
#install.packages("caper")
library(caper)
#install.packages("phytools")
library(phytools)
# For statistical analysis/graphs:
#install.packages("car")
library(car)
#install.packages("plotly")
library(plotly)
#install.packages("Rmisc")
library(Rmisc)
# Load the function(s) designed for this script:
#install.packages("devtools")
library(devtools)
#install_github("helixcn/phylotools")
library(phylotools)
source("GetTraitInfo.R")
source("TestPhyloSig.R")
source("PGLS.R")
source("MergeAndPGLS.R")
