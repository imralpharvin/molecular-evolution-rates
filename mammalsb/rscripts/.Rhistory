searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:797] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[799: tempMax] ,rettype="fasta")
#write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}else if(tempMax == 798){
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:797] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}
#commented out
}
else{
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:tempMax] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}
}
cytB <- readDNAStringSet("searchSequences.fasta")
seq_name = names(cytB)
sequence = paste(cytB)
dfcytB <- data.frame(seq_name, sequence)
library(ape)
library("Biostrings")
packageVersion("ape")
accessionList <- read.csv("accessionlist.csv")
accessionList <- as.vector(accessionList$accession)
genbankInfo<-read.GenBank(accessionList[1:100],species.names=T)
write.dna(genbankInfo,"cytochromeb.fasta", format="fasta")
cytB <- readDNAStringSet("cytochromeb.fasta")
seq_name = names(cytB)
sequence = paste(cytB)
dfcytB <- data.frame(seq_name, sequence)
####SEARCH TERM####
library(ape)
library("Biostrings")
library (rentrez)
searchTerm <- "cytochrome b[All Fields] AND \"Mammalia\"[Organism]"
numSearch <- 797
searchResult <- entrez_search(db="nuccore", term=searchTerm, retmax=numSearch)
searchResult
tempMin = 1
tempMax = 300
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:tempMax] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n")
while(tempMax != numSearch){
tempMin = tempMin + 300
tempMax = tempMax + 300
if(numSearch <= tempMax ){
tempMax = numSearch
}
#commented out
if(FALSE){
if(tempMin < 798 && tempMax > 798) {
print("stucks")
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:797] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[799: tempMax] ,rettype="fasta")
#write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}else if(tempMax == 798){
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:797] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}
#commented out
}
else{
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:tempMax] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}
}
searchTerm <- "cytochrome b[All Fields] AND \"Mammalia\"[Organism]"
numSearch <- 798
searchResult <- entrez_search(db="nuccore", term=searchTerm, retmax=numSearch)
searchResult
tempMin = 1
tempMax = 300
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:tempMax] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n")
while(tempMax != numSearch){
tempMin = tempMin + 300
tempMax = tempMax + 300
if(numSearch <= tempMax ){
tempMax = numSearch
}
#commented out
if(FALSE){
if(tempMin < 798 && tempMax > 798) {
print("stucks")
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:797] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[799: tempMax] ,rettype="fasta")
#write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}else if(tempMax == 798){
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:797] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}
#commented out
}
else{
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:tempMax] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}
}
searchTerm <- "cytochrome b[All Fields] AND \"Mammalia\"[Organism]"
numSearch <- 1000
searchResult <- entrez_search(db="nuccore", term=searchTerm, retmax=numSearch)
searchResult
tempMin = 1
tempMax = 300
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:tempMax] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n")
while(tempMax != numSearch){
tempMin = tempMin + 300
tempMax = tempMax + 300
if(numSearch <= tempMax ){
tempMax = numSearch
}
#commented out
if(FALSE){
if(tempMin < 798 && tempMax > 798) {
print("stucks")
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:797] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[799: tempMax] ,rettype="fasta")
#write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}else if(tempMax == 798){
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:797] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}
#commented out
}
else{
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:tempMax] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}
}
cytB <- readDNAStringSet("searchSequences.fasta")
seq_name = names(cytB)
sequence = paste(cytB)
dfcytB <- data.frame(seq_name, sequence)
library(bold)
?bold_specimens
load("C:/Users/RalphArvin/Desktop/pantheria/Sec 1 June 14a.RData")
load("C:/Users/RalphArvin/Desktop/pantheria/Sec 1 June 14a.RData")
library(data.table)
# For importing xslx data to data.frame
#install.packages("readxl")
library("readxl")
source("GetTraitSpecificDataBIN.R")
source("GetTraitSpecificData.R")
source("GetTraitInfo.R")
### TRAIT: MEDIAN LATITUDE ###
# Currently, median latitude is the only trait whose information is taken from BOLD. The rest of the data will be obtained from FishBase.
#1. Filtering for presence of a latitude value.
dfLatitudeSpecies <- dfFiltered[grep("[0-9]", lat)]
#2. Convert the latitude (lat) column to number instead of character type
dfLatitudeSpecies[, lat_num := as.numeric(lat)]
#3. Conversion to absolute values before median latitude values are calculated.
dfLatitudeSpecies[, abs_lat_num := abs(lat_num)]
#4. Determine a median latitude for each BIN using absolute values.
dfLatitudeSpecies[, median_lat := median(abs_lat_num), keyby = bin_uri]
#Range
dfLatitudeSpecies[, max_lat := max(lat_num), keyby = bin_uri]
dfLatitudeSpecies[, min_lat := min(lat_num), keyby = bin_uri]
dfLatitudeSpecies[, range_lat := max_lat - min_lat, keyby = bin_uri]
dfLatitudeSpecies <- dfLatitudeSpecies[, !c(14,15,17,18)]
# While considering traits for eventual multivariate analyses, it is necessary for them to have an adequate sample size
# (i.e. over x # rows of data, depending on your purposes). In addition, they should exhibit some amount of variation across the observations.
# Use the GetTraitSpecificDataBIN function to obtain a subset of data for those species that have latitude data available.
#5. Get the trait specific datatable.
dfLatitudeMedian <- setDT(GetTraitSpecificDataBIN(dfLatitudeSpecies, 14))
dfLatitudeRange <- setDT(GetTraitSpecificDataBIN(dfLatitudeSpecies, 15))
setnames(dfLatitudeMedian, "species_label", "species_name")
setnames(dfLatitudeRange, "species_label", "species_name")
#6. Get information for the trait.
GetTraitInfo(dfLatitudeMedian, "median_lat", type = "continuous")
GetTraitInfo(dfLatitudeRange, "range_lat", type = "continuous")
#7. Datatable reorganization for dfFiltered.
dfFiltered <- dfFiltered[, .(bin_uri, filtered_bin_size, recordID, order_name = order_label, family_name = family_label, genus_name = genus_label,
species_name = species_label, nucleotides)]
### TRAIT: PANTHERIA XLSX ###
#1.Reading the data to variable allMammals
rawMammalData <- read_excel("Pantheria.xlsx")
#2.Select traits by column and store it in a vector
selectedTraits <- c("MSW05_Order","MSW05_Family","MSW05_Genus","MSW05_Binomial", "5-1_AdultBodyMass_g","8-1_AdultForearmLen_mm","18-1_BasalMetRate_mLO2hr",  "15-1_LitterSize", "17-1_MaxLongevity_m", "23-1_SexualMaturityAge_d", "10-2_SocialGrpSize","12-1_HabitatBreadth","6-1_DietBreadth", "6-2_TrophicLevel", "1-1_ActivityCycle" )
#3.Filter the original data using the selectedTraits vector as the subset
traitData <- rawMammalData[selectedTraits]
#4.Renaming columns
colnames(traitData) <- c("order", "family", "genus", "species_name", "AdultBodyMass(g)", "AdultForearmLength(mm)", "BasalMetRate(mLO2hr)","LitterSize", "MaxLongevity(months)", "SexualMaturityAge(days)", "SocialGrpSize", "HabitatBreadth", "DietBreadth", "TrophicLevel", "ActivityCycle")
#5.Changing -999 values to NA
traitData[traitData == -999] <- NA
#6 Converting to data table
traitData <- as.data.table(traitData)
traitData <- traitData[,!c(1,2,3)]
#7 Merge Species name
mergedSpecies <- merge(dfFiltered, traitData, by = "species_name")
#7 single row per species
dfFilteredSingle <- dfFiltered[!duplicated(species_name)][, .(bin_uri, species_name, filtered_bin_size)]
load("C:/Users/RalphArvin/Desktop/pantheria/Sec 4 June 15a.RData")
install.packages("ape")
install.packages("phangorn")
install.packages("seqinr")
library(ape)
library(phangorn)
library(seqinr)
library(ape)
library(phangorn)
library(seqinr)
library(ape)
library(phangorn)
library(seqinr)
install.packages("ape")
b
#install.packages("phangorn")
#install.packages("seqinr")
library(ape)
library(phangorn)
#install.packages("phangorn")
#install.packages("seqinr")
library(ape)
#install.packages("ape")
#install.packages("phangorn")
#install.packages("seqinr")
library(ape)
library(phangorn)
library(seqinr)
load("C:/Users/RalphArvin/Desktop/work-s2018/mammals/pantheria/Sec 0 mammal.RData")
View(dfRawSeqs)
load("C:/Users/RalphArvin/Desktop/work-s2018/mammals/pantheria/turtle outgroup/Sec 2 June 19a.R")
load("C:/Users/RalphArvin/Desktop/work-s2018/mammals/pantheria/turtle outgroup/Sec 2 June 19a.R")
load("C:/Users/RalphArvin/Desktop/work-s2018/mammals/pantheria/turtle outgroup/Sec 2 June 20a.RData")
View(dfFiltered)
load("C:/Users/RalphArvin/Desktop/work-s2018/fishbase/Sec 4 June 14.RData")
load("C:/Users/RalphArvin/Desktop/work-s2018/mammals/pantheria/June 22/Sec 2 June 22.RData")
View(dfTraits)
load("C:/Users/RalphArvin/Desktop/work-s2018/mammalsb/June 22/Sec 1 June 22.RData")
setwd("C:/Users/RalphArvin/Desktop/work-s2018/mammalsb/rscripts")
#install.packages("data.table")
library(data.table)
# For importing xslx data to data.frame
#install.packages("readxl")
library("readxl")
source("GetTraitSpecificDataBIN.R")
source("GetTraitSpecificData.R")
source("GetTraitInfo.R")
# Read mammal data
placentalMammalData <- read_excel("placental.xlsx")
placentalMammalData$refs <- NULL
# Rename columns
colnames(placentalMammalData) <- c("order", "family", "genus", "species_name", "body_mass", "gestation_length", "neonate_bodymass", "weaning_age", "weaning_bodymass", "firstbirth_age", "max_longevity", "litter_size", "litters_pyear");
# Changing -999 values to NA
placentalMammalData[placentalMammalData == -999] <- NA
# Converting to data table
placentalMammalData <- as.data.table(placentalMammalData)
traitData <- traitData[,!c(1,2,3)]
amnioteMammalData <- read.csv("Amniote.csv")
anageMammalData <- read_excel("anage.xlsx")
eltonMammalData <- read_excel("eltontrait.xlsx")
View(amnioteMammalData)
View(anageMammalData)
View(eltonMammalData)
View(placentalMammalData)
load("C:/Users/RalphArvin/Desktop/work-s2018/mammalsb/June 22/Sec 1 June 22.RData")
setwd("C:/Users/RalphArvin/Desktop/work-s2018/mammalsb/rscripts")
library(data.table)
# For importing xslx data to data.frame
#install.packages("readxl")
library("readxl")
source("GetTraitSpecificDataBIN.R")
source("GetTraitSpecificData.R")
source("GetTraitInfo.R")
#### TRAIT: MEDIAN LATITUDE ####
# Filtering for presence of a latitude value.
dfLatitudeSpecies <- dfFiltered[grep("[0-9]", lat)]
# Convert the latitude (lat) column to number instead of character type
dfLatitudeSpecies[, lat_num := as.numeric(lat)]
# Conversion to absolute values before median latitude values are calculated.
dfLatitudeSpecies[, abs_lat_num := abs(lat_num)]
# Determine a median latitude for each BIN using absolute values.
dfLatitudeSpecies[, median_lat := median(abs_lat_num), keyby = bin_uri]
#### TRAIT: LATITUDE RANGE ####
# Get maximum latitude for each bin
dfLatitudeSpecies[, max_lat := max(lat_num), keyby = bin_uri]
# Get minimum latitude for each bin
dfLatitudeSpecies[, min_lat := min(lat_num), keyby = bin_uri]
# Subtract maximum latitude and minimum latitude
dfLatitudeSpecies[, range_lat := max_lat - min_lat, keyby = bin_uri]
# Datatable organization
dfLatitudeSpecies <- dfLatitudeSpecies[, !c(14,15,17,18)]
# Get the trait specific datatable.
dfLatitudeMedian <- setDT(GetTraitSpecificDataBIN(dfLatitudeSpecies, 14))
dfLatitudeRange <- setDT(GetTraitSpecificDataBIN(dfLatitudeSpecies, 15))
# Datatable reorganization
setnames(dfLatitudeMedian, "species_label", "species_name")
setnames(dfLatitudeRange, "species_label", "species_name")
dfFiltered <- dfFiltered[, .(bin_uri, filtered_bin_size, recordID, order_name = order_label, family_name = family_label, genus_name = genus_label,
species_name = species_label, nucleotides)]
dfLatitudeMedian <- dfLatitudeMedian[, !c(1,3)]
dfLatitudeRange <- dfLatitudeRange[, !c(1,3)]
#### TRAIT: PANTHERIA XLSX ####
# Read excel sheet data
rawMammalData <- read_excel("Pantheria.xlsx")
# Select all columns
selectedTraits<- c("MSW05_Order","MSW05_Family","MSW05_Genus","MSW05_Binomial", "5-1_AdultBodyMass_g" ,"8-1_AdultForearmLen_mm", "13-1_AdultHeadBodyLen_mm", "2-1_AgeatEyeOpening_d" ,"3-1_AgeatFirstBirth_d", "18-1_BasalMetRate_mLO2hr" ,"5-2_BasalMetRateMass_g" ,"7-1_DispersalAge_d" ,"9-1_GestationLen_d", "22-1_HomeRange_km2"
,"22-2_HomeRange_Indiv_km2","14-1_InterbirthInterval_d", "15-1_LitterSize","16-1_LittersPerYear","17-1_MaxLongevity_m", "5-3_NeonateBodyMass_g"       , "13-2_NeonateHeadBodyLen_mm", "21-1_PopulationDensity_n/km2", "10-1_PopulationGrpSize", "23-1_SexualMaturityAge_d", "10-2_SocialGrpSize","24-1_TeatNumber"
, "25-1_WeaningAge_d" , "5-4_WeaningBodyMass_g" , "13-3_WeaningHeadBodyLen_mm","26-1_GR_Area_km2" , "26-2_GR_MaxLat_dd" ,"26-3_GR_MinLat_dd", "26-4_GR_MidRangeLat_dd","26-5_GR_MaxLong_dd"
, "26-6_GR_MinLong_dd", "26-7_GR_MidRangeLong_dd","27-1_HuPopDen_Min_n/km2" , "27-2_HuPopDen_Mean_n/km2", "27-3_HuPopDen_5p_n/km2", "27-4_HuPopDen_Change"
, "28-1_Precip_Mean_mm" , "28-2_Temp_Mean_01degC" ,"30-1_AET_Mean_mm","30-2_PET_Mean_mm","1-1_ActivityCycle",  "6-1_DietBreadth", "12-1_HabitatBreadth", "12-2_Terrestriality", "6-2_TrophicLevel")
# Filter the original data using the selectedTraits vector as the subset
traitData <- rawMammalData[selectedTraits]
# Rename columns
colnames(traitData) <- c("order", "family", "genus", "species_name", "body_mass", "forearm_length", "headbody_length", "eyeopening_age", "firstbirth_age", "bmr_rate", "bmr_mass", "dispersal_age", "gestation_length", "home_range", "home_range_indiv", "interbirth_interval", "litter_size", "litters_pyear", "max_longevity", "neonate_bodymass", "neonate_headbodylength", "pop_density", "pop_grpsize", "sexualmaturity_age", "social_grpsize", "teatnumber", "weaning_age", "weaning_bodymass", "weaning_bodylength", "GR_area", "GR_maxlat", "GR_minlat", "GR_midrangelat", "GR_maxlong", "GR_minlong", "GR_midrangelong", "hupopden_min", "hupopden_mean", "hupopden_5p", "hupopden_change", "precip_mean", "temp_mean", "AET_mean", "PET_mean", "activity_cycle", "diet_breadth", "habitat_breadth", "terrestriality", "trophic_level")
# Changing -999 values to NA
traitData[traitData == -999] <- NA
# Converting to data table
traitData <- as.data.table(traitData)
traitData <- traitData[,!c(1,2,3)]
# Merge Species name
mergedSpecies <- merge(dfFiltered, traitData, by = "species_name")
# Single row per species
dfFilteredSingle <- dfFiltered[!duplicated(species_name)][, .(bin_uri, species_name, filtered_bin_size)]
#
dfTraits <- Reduce(function(...) merge(..., all = T, by = "species_name"), list(dfFilteredSingle, dfLatitudeMedian,dfLatitudeRange, traitData ))
#
dfTraits<- dfTraits[!is.na(bin_uri)]
missing <- dfTraits[, apply(.SD, 1, function(x) all(is.na(x))), .SDcols = 4:50]
missing <- which(missing == TRUE)
dfTraits <-dfTraits[!missing]
dfPreCentroid <- merge(dfFiltered, dfTraits, by = "bin_uri")[, 1:8]
dfPreCentroid<- dfPreCentroid[,c(7,1,2,3,4,5,6,8)]
# Dataframe reorganization and renaming.
setnames(dfPreCentroid, "species_name.x", "species_name")
setnames(dfPreCentroid, "filtered_bin_size.x", "filtered_bin_size")
rm(selectedTraits, missing); rm(traitData,dfLatitudeMedian,dfLatitudeRange, dfLatitudeSpecies, mergedSpecies, rawMammalData, dfFilteredSingle, dfResolve)
library(data.table)
# For importing xslx data to data.frame
#install.packages("readxl")
library("readxl")
source("GetTraitSpecificDataBIN.R")
source("GetTraitSpecificData.R")
source("GetTraitInfo.R")
#### TRAIT: MEDIAN LATITUDE ####
# Filtering for presence of a latitude value.
dfLatitudeSpecies <- dfFiltered[grep("[0-9]", lat)]
# Convert the latitude (lat) column to number instead of character type
dfLatitudeSpecies[, lat_num := as.numeric(lat)]
# Conversion to absolute values before median latitude values are calculated.
dfLatitudeSpecies[, abs_lat_num := abs(lat_num)]
# Determine a median latitude for each BIN using absolute values.
dfLatitudeSpecies[, median_lat := median(abs_lat_num), keyby = bin_uri]
#### TRAIT: LATITUDE RANGE ####
# Get maximum latitude for each bin
dfLatitudeSpecies[, max_lat := max(lat_num), keyby = bin_uri]
# Get minimum latitude for each bin
dfLatitudeSpecies[, min_lat := min(lat_num), keyby = bin_uri]
# Subtract maximum latitude and minimum latitude
dfLatitudeSpecies[, range_lat := max_lat - min_lat, keyby = bin_uri]
# Datatable organization
dfLatitudeSpecies <- dfLatitudeSpecies[, !c(14,15,17,18)]
# Get the trait specific datatable.
dfLatitudeMedian <- setDT(GetTraitSpecificDataBIN(dfLatitudeSpecies, 14))
dfLatitudeRange <- setDT(GetTraitSpecificDataBIN(dfLatitudeSpecies, 15))
# Datatable reorganization
setnames(dfLatitudeMedian, "species_label", "species_name")
setnames(dfLatitudeRange, "species_label", "species_name")
dfFiltered <- dfFiltered[, .(bin_uri, filtered_bin_size, recordID, order_name = order_label, family_name = family_label, genus_name = genus_label,
species_name = species_label, nucleotides)]
dfLatitudeMedian <- dfLatitudeMedian[, !c(1,3)]
dfLatitudeRange <- dfLatitudeRange[, !c(1,3)]
#### TRAIT: PANTHERIA XLSX ####
# Read excel sheet data
rawMammalData <- read_excel("Pantheria.xlsx")
# Select all columns
selectedTraits<- c("MSW05_Order","MSW05_Family","MSW05_Genus","MSW05_Binomial", "5-1_AdultBodyMass_g" ,"8-1_AdultForearmLen_mm", "13-1_AdultHeadBodyLen_mm", "2-1_AgeatEyeOpening_d" ,"3-1_AgeatFirstBirth_d", "18-1_BasalMetRate_mLO2hr" ,"5-2_BasalMetRateMass_g" ,"7-1_DispersalAge_d" ,"9-1_GestationLen_d", "22-1_HomeRange_km2"
,"22-2_HomeRange_Indiv_km2","14-1_InterbirthInterval_d", "15-1_LitterSize","16-1_LittersPerYear","17-1_MaxLongevity_m", "5-3_NeonateBodyMass_g"       , "13-2_NeonateHeadBodyLen_mm", "21-1_PopulationDensity_n/km2", "10-1_PopulationGrpSize", "23-1_SexualMaturityAge_d", "10-2_SocialGrpSize","24-1_TeatNumber"
, "25-1_WeaningAge_d" , "5-4_WeaningBodyMass_g" , "13-3_WeaningHeadBodyLen_mm","26-1_GR_Area_km2" , "26-2_GR_MaxLat_dd" ,"26-3_GR_MinLat_dd", "26-4_GR_MidRangeLat_dd","26-5_GR_MaxLong_dd"
, "26-6_GR_MinLong_dd", "26-7_GR_MidRangeLong_dd","27-1_HuPopDen_Min_n/km2" , "27-2_HuPopDen_Mean_n/km2", "27-3_HuPopDen_5p_n/km2", "27-4_HuPopDen_Change"
, "28-1_Precip_Mean_mm" , "28-2_Temp_Mean_01degC" ,"30-1_AET_Mean_mm","30-2_PET_Mean_mm","1-1_ActivityCycle",  "6-1_DietBreadth", "12-1_HabitatBreadth", "12-2_Terrestriality", "6-2_TrophicLevel")
# Filter the original data using the selectedTraits vector as the subset
traitData <- rawMammalData[selectedTraits]
# Rename columns
colnames(traitData) <- c("order", "family", "genus", "species_name", "body_mass", "forearm_length", "headbody_length", "eyeopening_age", "firstbirth_age", "bmr_rate", "bmr_mass", "dispersal_age", "gestation_length", "home_range", "home_range_indiv", "interbirth_interval", "litter_size", "litters_pyear", "max_longevity", "neonate_bodymass", "neonate_headbodylength", "pop_density", "pop_grpsize", "sexualmaturity_age", "social_grpsize", "teatnumber", "weaning_age", "weaning_bodymass", "weaning_bodylength", "GR_area", "GR_maxlat", "GR_minlat", "GR_midrangelat", "GR_maxlong", "GR_minlong", "GR_midrangelong", "hupopden_min", "hupopden_mean", "hupopden_5p", "hupopden_change", "precip_mean", "temp_mean", "AET_mean", "PET_mean", "activity_cycle", "diet_breadth", "habitat_breadth", "terrestriality", "trophic_level")
# Changing -999 values to NA
traitData[traitData == -999] <- NA
# Converting to data table
traitData <- as.data.table(traitData)
traitData <- traitData[,!c(1,2,3)]
# Merge Species name
mergedSpecies <- merge(dfFiltered, traitData, by = "species_name")
# Single row per species
dfFilteredSingle <- dfFiltered[!duplicated(species_name)][, .(bin_uri, species_name, filtered_bin_size)]
#
dfTraits <- Reduce(function(...) merge(..., all = T, by = "species_name"), list(dfFilteredSingle, dfLatitudeMedian,dfLatitudeRange, traitData ))
#
dfTraits<- dfTraits[!is.na(bin_uri)]
missing <- dfTraits[, apply(.SD, 1, function(x) all(is.na(x))), .SDcols = 4:50]
missing <- which(missing == TRUE)
dfTraits <-dfTraits[!missing]
dfPreCentroid <- merge(dfFiltered, dfTraits, by = "bin_uri")[, 1:8]
dfPreCentroid<- dfPreCentroid[,c(7,1,2,3,4,5,6,8)]
# Dataframe reorganization and renaming.
setnames(dfPreCentroid, "species_name.x", "species_name")
setnames(dfPreCentroid, "filtered_bin_size.x", "filtered_bin_size")
amnioteMammalData<- amnioteMammalData[class %like% "Mammalia"]
?like
amnioteMammalData<- amnioteMammalData[class %like% "[Mammalia]"]
amnioteMammalData<- amnioteMammalData[class %like% Mammalia]
amnioteMammalData<- amnioteMammalData[class = "Mammalia"]
amnioteMammalData<- amnioteMammalData[class %in% "Mammalia"]
amnioteMammalData<- amnioteMammalData['class' == "Mammalia"]
amnioteMammalData <- read.csv("Amniote.csv")
amnioteMammalData<- amnioteMammalData['class' == "Mammalia"]
View(amnioteMammalData)
amnioteMammalData<- amnioteMammalData[amnioteMammalData['class'] == "Mammalia"]
amnioteMammalData <- read.csv("Amniote.csv")
amnioteMammalData<- amnioteMammalData[amnioteMammalData['class'] == "Mammalia"]
amnioteMammalData <- read.csv("Amniote.csv")
amnioteMammalData<- amnioteMammalData[amnioteMammalData['class'] == 'Mammalia']
amnioteMammalData <- read.csv("Amniote.csv")
amnioteMammalData<- amnioteMammalData['class' == 'Mammalia']
amnioteMammalData <- read.csv("Amniote.csv")
amnioteMammalData<- amnioteMammalData[amnioteMammalData.class == 'Mammalia']
library(dplyr)
amnioteMammalData <- read.csv("Amniote.csv")
filter(amnioteMammalData, class == "Mammalia")
amnioteMammalData <- filter(amnioteMammalData, class == "Mammalia")
View(amnioteMammalData)
amnioteMammalData[amnioteMammalData == -999] <- NA
View(amnioteMammalData)
View(traitData)
# Read mammal data
placentalMammalData <- read_excel("placental.xlsx")
placentalMammalData$refs <- NULL
# Rename columns
colnames(placentalMammalData) <- c("order", "family", "genus", "species_name", "body_mass", "gestation_length", "neonate_bodymass", "weaning_age", "weaning_bodymass", "firstbirth_age", "max_longevity", "litter_size", "litters_pyear");
# Changing -999 values to NA
placentalMammalData[placentalMammalData == -999] <- NA
# Converting to data table
placentalMammalData <- as.data.table(placentalMammalData)
unite_(placentalMammalData, "species", c("genus","species_name"))
unite(placentalMammalData, "species", c("genus","species_name"))
library(tidyr)
unite(placentalMammalData, "species", c("genus","species_name"))
placentalMammalData <- unite(placentalMammalData, "species", c("genus","species_name"))
View(placentalMammalData)
?unit
?unite
# Read mammal data
placentalMammalData <- read_excel("placental.xlsx")
placentalMammalData$refs <- NULL
# Rename columns
colnames(placentalMammalData) <- c("order", "family", "genus", "species_name", "body_mass", "gestation_length", "neonate_bodymass", "weaning_age", "weaning_bodymass", "firstbirth_age", "max_longevity", "litter_size", "litters_pyear");
# Changing -999 values to NA
placentalMammalData[placentalMammalData == -999] <- NA
# Converting to data table
placentalMammalData <- as.data.table(placentalMammalData)
placentalMammalData <- unite(placentalMammalData, "species", c("genus","species_name"), sep = " ", remove = FALSE)
View(placentalMammalData)
#placentalMammalData <- unite(placentalMammalData, "species", c("genus","species_name"), sep = " ", remove = FALSE)
selectedTraits<- c(1:5, 9:16, 22, 29, 32, 36)
amnioteMammalData <- read.csv("Amniote.csv")
amnioteMammalData<- amnioteMammalData[, c(1:5, 9:16, 22, 29, 32, 36)]
View(amnioteMammalData)
amnioteMammalData<- amnioteMammalData[amnioteMammalData.class == 'Mammalia']
amnioteMammalData <- read.csv("Amniote.csv")
amnioteMammalData <- filter(amnioteMammalData, class == "Mammalia")
amnioteMammalData <- filter(amnioteMammalData, class == "Mammalia")
amnioteMammalData<- amnioteMammalData[, c(1:5, 9:16, 22, 29, 32, 36)]
amnioteMammalData <- read.csv("Amniote.csv")
amnioteMammalData <- filter(amnioteMammalData, class == "Mammalia")
amnioteMammalData<- amnioteMammalData[, c(1:5, 9:16, 22, 29, 32, 36)]
amnioteMammalData[amnioteMammalData == -999] <- NA
anageMammalData <- read_excel("anage.xlsx")
anageMammalData<- anageMammalData[, c(4:8, 12:21)]
View(anageMammalData)
anageMammalData <- filter(anageMammalData, Class == "Mammalia")
View(anageMammalData)
View(placentalMammalData)
View(amnioteMammalData)
amnioteMammalData <- unite(amnioteMammalData, "species_name", c("genus","species"), sep = " ", remove = FALSE)
View(amnioteMammalData)
rename(amnioteMammalData, litter_or_clutch_size_n = litter_size)
rename(amnioteMammalData,  litter_size = litter_or_clutch_size_n)
amnioteMammalData <- rename(amnioteMammalData,  litter_size = litter_or_clutch_size_n)
View(amnioteMammalData)
amnioteMammalData <- rename(amnioteMammalData,  litter_size = litter_or_clutch_size_n, litters_pyear = litters_or_clutches_per_y)
amnioteMammalData <- read.csv("Amniote.csv")
amnioteMammalData <- filter(amnioteMammalData, class == "Mammalia")
amnioteMammalData<- amnioteMammalData[, c(1:5, 9:16, 22, 29, 32, 36)]
amnioteMammalData[amnioteMammalData == -999] <- NA
amnioteMammalData <- unite(amnioteMammalData, "species_name", c("genus","species"), sep = " ", remove = FALSE)
amnioteMammalData <- rename(amnioteMammalData,  litter_size = litter_or_clutch_size_n, litters_pyear = litters_or_clutches_per_y)
View(amnioteMammalData)
View(traitData)
amnioteMammalData <- read.csv("Amniote.csv")
amnioteMammalData <- filter(amnioteMammalData, class == "Mammalia")
amnioteMammalData<- amnioteMammalData[, c(1:5, 9:16, 22, 29, 32, 36)]
amnioteMammalData[amnioteMammalData == -999] <- NA
amnioteMammalData <- unite(amnioteMammalData, "species_name", c("genus","species"), sep = " ", remove = FALSE)
amnioteMammalData <- rename(amnioteMammalData,  litter_size = litter_or_clutch_size_n, litters_pyear = litters_or_clutches_per_y, body_mass = adult_body_mass_g, max_longevity = maximum_longevity_y, gestation_length = gestation_d, weaning_age = weaning_d, neonate_bodymass = birth_or_hatching_weight_g, weaning_bodymass = weaning_weight_g, interbirth_length = inter_litter_or_interbirth_interval_y, adult_svl_length = adult_svl_cm, neonate_svl_cm = birth_or_hatching_svl_cm, maturity_length = no_sex_maturity_d)
View(amnioteMammalData)
amnioteMammalData <- read.csv("Amniote.csv")
amnioteMammalData <- filter(amnioteMammalData, class == "Mammalia")
amnioteMammalData<- amnioteMammalData[, c(1:5, 9:16, 22, 29, 32, 36)]
amnioteMammalData[amnioteMammalData == -999] <- NA
amnioteMammalData <- unite(amnioteMammalData, "species_name", c("genus","species"), sep = " ", remove = FALSE)
amnioteMammalData <- rename(amnioteMammalData,  litter_size = litter_or_clutch_size_n, litters_pyear = litters_or_clutches_per_y, body_mass = adult_body_mass_g, max_longevity = maximum_longevity_y, gestation_length = gestation_d, weaning_age = weaning_d, neonate_bodymass = birth_or_hatching_weight_g, weaning_bodymass = weaning_weight_g, interbirth_length = inter_litter_or_interbirth_interval_y, adult_svl_length = adult_svl_cm, neonate_svl_length = birth_or_hatching_svl_cm, maturity_length = no_sex_maturity_d)
anageMammalData <- rename(anageMammalData, class = Class, order = Order, family = Family, genus = Genus, species = Species, gestation_length = Gestation/Incubation(days))
anageMammalData <- rename(anageMammalData, class = Class, order = Order, family = Family, genus = Genus, species = Species, gestation_length = "Gestation/Incubation(days)")
anageMammalData <- rename(anageMammalData, class = Class, order = Order, family = Family, genus = Genus, species = Species, gestation_length = "Gestation/Incubation (days)")
colnames(anageMammalData)
anageMammalData <- read_excel("anage.xlsx")
anageMammalData<- anageMammalData[, c(4:8, 12:21)]
anageMammalData <- filter(anageMammalData, Class == "Mammalia")
anageMammalData <- rename(anageMammalData, class = Class, order = Order, family = Family, genus = Genus, species = Species, gestation_length = "Gestation/Incubation (days)", weaning_age = "Weaning (days)", litter_size = "Litter/Clutch size", litters_pyear = "Litters/Clutches per year", interbirth_length =  "Inter-litter/Interbirth interval", neonate_bodymass = "Birth weight (g)" , weaning_bodymass= "Weaning weight (g)", body_mass = "Adult weight (g)", growth_rate = "Growth rate (1/days)", max_longevity = "Maximum longevity (yrs)")
