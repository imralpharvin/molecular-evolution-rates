# Or view it directly here at http://www.gnu.org/licenses/
#############################################################################################################################
##### SECTION 3: CENTROID SEQUENCE DETERMINATION #####
# This section is designed to select a centroid sequence for each BIN. A centroid sequence is the sequence in a BIN with minimum sum of pairwise
# distance to all other sequences in the BIN. It will serve as a representative sequence for the BIN/species.
setwd("C:/Users/RalphArvin/Desktop/work-s2018/mammals/rscripts")
### PACKAGES REQUIRED ###
# For data manipulation:
#install.packages("data.table")
library(data.table)
# For multiple sequence alignments:
#install.packages("ape")
library(ape)
#source("https://bioconductor.org/biocLite.R")
#biocLite("Biostrings")
library(Biostrings)
#biocLite("muscle")
library(muscle)
#install.packages("foreach")
library(foreach)
# Load the function(s) designed for this script:
source("RefSeqTrim.R")
#############################################################################################################################
# Subset dataframe to find BINs with more than one sequence.
dfLargeBins <- dfPreCentroid[filtered_bin_size > 1]
# If there is at least one BIN with more than one sequence...
if (nrow(dfLargeBins) > 0) {
# Remove gaps from the sequences.
dfPreCentroid[, nucleotides := gsub("-", "", nucleotides)]
# Subset out the BINs with more than 1 sequence.
dfCentroidSeqs <- dfPreCentroid[bin_uri %in% dfLargeBins$bin_uri]
# We also have to create another separate dataframe with BINs that only have one sequence, called dfSingletons.
dfSingletons <- dfPreCentroid[!bin_uri %in% dfLargeBins$bin_uri]
# We then take the dfCentroidSeqs sequences and group them by BIN.
largeBinList <- split(dfCentroidSeqs, by = "bin_uri")
# Convert all the sequences in largeBinList to DNAStringSet format for
# the multiple sequence alignment.
DNAStringSetList <- lapply(largeBinList, function(x) DNAStringSet(x$nucleotides))
# Name DNAStringSetList using the recordIDs.
for (i in seq(from = 1, to = length(unique(dfCentroidSeqs$bin_uri)), by = 1)) {
names(DNAStringSetList[[i]]) <- largeBinList[[i]]$recordID
}
# Align the sequences in each BIN using MUSCLE.
alignmentList <- lapply(DNAStringSetList, function(x) muscle::muscle(x, diags = TRUE, gapopen = -3000))
# Convert each BIN alignment to DNAbin format.
alignmentList <- lapply(alignmentList, function(x) as.DNAbin(x))
# Estimates the genetic distance between sequences in each BIN with the TN93 model.
distanceMatrixList <- lapply(alignmentList, function(x) dist.dna(x, model = "TN93", as.matrix = TRUE, pairwise.deletion = TRUE))
# Find the centroid sequence using the genetic distance matrix. It is the sequence in a BIN with minimum average pairwise distance to all other sequences in the BIN.
centroidSeqs <- sapply(distanceMatrixList, function(x) which.min(rowSums(x)))
centroidSeqs <- names(centroidSeqs)
centroidSeqs <- gsub("^.*\\.", "", centroidSeqs)
centroidSeqs <- as.numeric(centroidSeqs)
# Subset dfCentroidSeqs by the recordIDs of the centroid sequences.
dfCentroidSeqs <- dfCentroidSeqs[dfCentroidSeqs$recordID %in% centroidSeqs]
# Combine the singletons and centroid sequences into a new dataframe. Now each BIN has a representative sequence.
dfCentroidSeqs <- rbind(dfCentroidSeqs, dfSingletons)
} else {
# Centroid sequence selection not required if all BINs are singletons.
dfCentroidSeqs <- dfPreCentroid
}
# REFERENCE SEQUENCE TRIMMING #
# Trim the centroid sequences according to a standardized reference sequence. Currently, a standard length (658 bp) COI-5P sequence from
# Perca flavescens (yellow perch) is being used to trim Actinopterygii barcode sequences.
# Use the RefSeqTrim function to trim nucleotide sequences in a dataframe according to a given reference sequence.
dfCheckCentroidSeqs <- RefSeqTrim(dfCentroidSeqs)
dfCheckCentroidSeqs[,1:7]<- dfCentroidSeqs[,1:7]
# Remove objects that are not required for Section 4.
rm(alignmentList, centroidSeqs, i); rm(dfPreCentroid, dfLargeBins, dfSingletons); rm(largeBinList, distanceMatrixList, DNAStringSetList)
save.image("C:/Users/RalphArvin/Desktop/work-s2018/mammals/pantheria/June 22/Sec 3 June 22.RData")
# # Copyright (C) 2018 Jacqueline May.
# Program Description: Multivariable analysis of environmental and biological correlates affecting fish molecular evolution rates.
# Contributions & Acknowledgements #
# Dr. Sarah J. Adamowicz and Dr. Zeny Feng for help with designing and structuring the pipeline.
# Adapted lines from code shared in Stack Overflow discussion:
# Author: https://stackoverflow.com/users/1312519/by0.
# https://stackoverflow.com/questions/12866189/calculating-the-outliers-in-r.
# Author: https://stackoverflow.com/users/2474755/j-r.
# https://stackoverflow.com/questions/27892100/distance-matrix-to-pairwise-distance-list-in-r.
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# There is a copy of the GNU General Public License along with this program in the repository where it is located.
# Or view it directly here at http://www.gnu.org/licenses/
#############################################################################################################################
##### SECTION 4: ALIGNMENT QUALITY CHECKING #####
# This section performs alignment quality control checking by removing extremely gappy sequences, outliers, and BINs that have neighbours in a
# different taxonomic group (i.e. they may be contaminated or may have been misidentified).
setwd("C:/Users/RalphArvin/Desktop/work-s2018/mammals/rscripts")
### PACKAGES REQUIRED ###
# For data manipulation:
#install.packages("data.table")
library(data.table)
#install.packages(stringr)
library(stringr)
# For multiple sequence alignments:
#install.packages("ape")
library(ape)
#source("https://bioconductor.org/biocLite.R")
#biocLite("Biostrings")
library(Biostrings)
#biocLite("muscle")
library(muscle)
library(foreach)
# Load the function(s) designed for this script:
source("RefSeqTrim.R")
source("RemoveSequences.R")
#############################################################################################################################
### QUALITY CHECK 1: GAPPY SEQUENCES ###
# Here, extremely gappy/ungappy sequences are removed. These sequences are assumed to contribute to misalignment of the
# sequences or may even be pseudogenes. Manual checking of the alignment is recommended.
# Determine the number of positions where an *internal* N or gap is found for each sequence.
dfCheckCentroidSeqs[, internal_gapN := str_count(nucleotides, c("[-+]"))]
# Which sequences are NOT within the range of mean number of gaps in the centroid sequences +/- 7? These represent extremely gappy sequences.
dfGappySeqs <- dfCheckCentroidSeqs[!internal_gapN %between% c(mean(internal_gapN) - 7, mean(internal_gapN) + 7)]
# Make sure outgroups are not included in the dfGappySeqs!
dfGappySeqs <- dfGappySeqs[!species_name %in% outgroups]
# Remove the gappy sequences from the original dfCentroidSeqs as we will be realigning these sequences again once troublesome cases are removed.
dfCentroidSeqs <- RemoveSequences(dfCentroidSeqs, dfGappySeqs$species_name)
### QUALITY CHECK 2: OUTLIERS ###
# Remove centroid sequences whose genetic distances to all other sequences fall outside the typical range of genetic divergence for this group of organisms.
# First, convert the sequences to DNAbin format so we can build a distance matrix.
DNABinNN <- DNAStringSet(dfCheckCentroidSeqs$nucleotides)
names(DNABinNN) <- dfCheckCentroidSeqs$species_name
DNABinNN <- as.DNAbin(DNABinNN)
# Then, we construct a pairwise distance matrix using the TN93 model.
distanceMatrix <- dist.dna(DNABinNN, model = "TN93", as.matrix = TRUE, pairwise.deletion = TRUE)
# Use the upper threshold of the IQR to detect outliers.
lowerQuantile <- quantile(distanceMatrix)[2]
upperQuantile <- quantile(distanceMatrix)[4]
iqr <- upperQuantile - lowerQuantile
upperThreshold <- (iqr * 1.5) + upperQuantile
# Remove 0 values so that these are not considered (when a species is compared to itself - the diagonal values).
distanceMatrix[distanceMatrix == 0] <- NA
# Convert to datatable.
dfOutliers <- as.data.table(distanceMatrix, keep.rownames = T)
# Rename the "rn" column (row names).
setnames(dfOutliers, "rn", "species_name")
# Identify BINs with no relatives within "typical" range of genetic divergence (i.e. all of their genetic distances are greater than 1.5 x IQR upper threshold.)
dfOutliers <- dfOutliers[, outlier := apply(.SD, 1, function(x) all(x > upperThreshold, na.rm = T))][outlier == TRUE]
# Make sure outgroups are not included in the outliers!
dfOutliers <- dfOutliers[!species_name %in% outgroups]
# If desired, remove the outliers from dfCentroidSeqs.
dfCentroidSeqs <- RemoveSequences(dfCentroidSeqs, dfOutliers$species_name)
### QUALITY CHECK 3: CLOSE NEIGHBOUR TAXONOMY ###
# Remove centroid sequences whose close neighbours are in a different order or family. Close neighbours can be determined
# from the distance matrix. They are sequences that are within a genetic distance of 0.05. If these neighbours are in a different
# order or family, this may be indicative of something weird going on in either the sequence data or taxonomic assignment.
dfGeneticDistance <- as.data.table(distanceMatrix)
# Convert the distance matrix to a datatable with the names of the species pairs and their distances.
dfGeneticDistance <- data.table(t(combn(names(dfGeneticDistance), 2)), distance = t(dfGeneticDistance)[lower.tri(dfGeneticDistance)])
setnames(dfGeneticDistance, old = c("V1", "V2"), new = c("species_1", "species_2"))
# Subset out all close neighbour pairings that share a genetic distance under 0.05 to any other sequence.
dfGeneticDistance <- dfGeneticDistance[distance < 0.05]
# Get the order and families names of the species from dfCentroidSeqs.
dfGeneticDistance <- merge(dfGeneticDistance, dfCentroidSeqs[, c(1, 5:6)], by.x = "species_1", by.y = "species_name")
dfGeneticDistance <- merge(dfGeneticDistance, dfCentroidSeqs[, c(1, 5:6)], by.x = "species_2", by.y = "species_name")
setnames(dfGeneticDistance, old = c("order_name.x", "family_name.x", "order_name.y", "family_name.y"),
new = c("order_1", "family_1", "order_2", "family_2"))
# Now, which orders do not match between order_1 and order_2?
dfMismatchOrders <- dfGeneticDistance[order_1 != order_2]
# Remove these species from dfCentroidSeqs if desired:
dfCentroidSeqs <- RemoveSequences(dfCentroidSeqs, c(unique(dfMismatchOrders$species_1), unique(dfMismatchOrders$species_2)))
# Now, which families do not match between family_1 and family_2?
dfMismatchFamilies <- dfGeneticDistance[family_1 != family_2]
# Remove these species from dfCentroidSeqs if desired:
dfCentroidSeqs <- RemoveSequences(dfCentroidSeqs, c(unique(dfMismatchFamilies$species_1), unique(dfMismatchFamilies$species_2)))
### OUTGROUP CHECK ###
# Which outgroups made it pass the filters? Remove them from dfCentroidSeqs to build a tree just using the ingroup
# (so that inclusion of outgroups in the tree building process doesn't affect the branch length estimates of the in-group).
dfGoodOutgroups <- dfCentroidSeqs[dfCentroidSeqs$species_name %in% outgroups]
# Remove the outgroups from dfCentroidSeqs and rename it to indicate that it does not include the outgroup (NO = no outgroup).
dfCentroidSeqsNO <- dfCentroidSeqs[!dfCentroidSeqs$species_name %in% outgroups]
# Now, re-trim and align the sequences without the outgroups.
dfCentroidSeqsNO <- RefSeqTrim(dfCentroidSeqsNO)
# Once finished, make sure to check over sequences/alignment, and make sure they are in the correct reading frame.
# Make sure to save the resulting alignments under a different name, or save in a new directory so they are not replaced.
# Now re-run the alignment including outgroups (pick outgroup species that are well represented and that serve as an appropriate
# outgroup to your taxa).
# Rename dfCentroidSeqs to indicate that it includes the outgroup (WO = with outgroup.)
dfCentroidSeqsWO <- dfCentroidSeqs
# Run the alignment with outgroups included.
dfCentroidSeqsWO <- RefSeqTrim(dfCentroidSeqsWO)
# Remove objects that are not required for Section 5.
rm(DNABinNN, iqr, lowerQuantile, upperQuantile, upperThreshold, distanceMatrix)
rm(dfCentroidSeqs, dfCheckCentroidSeqs, dfGappySeqs, dfGeneticDistance, dfOutliers, dfMismatchOrders, dfMismatchFamilies, dfGoodOutgroups)
View(dfCentroidSeqsNO)
save.image("C:/Users/RalphArvin/Desktop/work-s2018/mammals/pantheria/June 22/Sec 4a June 22.RData")
setwd("C:/Users/RalphArvin/Desktop/work-s2018/mammals/rscripts")
#install.packages("ape")
#install.packages("phangorn")
#install.packages("seqinr")
#source("https://bioconductor.org/biocLite.R")
#biocLite("Biostrings")
library(ape)
library(phangorn)
library(seqinr)
library(Biostrings)
#Converting data table to DNAStringSet object
mammalDSA <- DNAStringSet(dfCentroidSeqsNO$nucleotides)
#Write dna file for dna string set
write.dna(mammalDSA, "mammals.DNA")
#Read  dna file
mammals <- read.dna("mammals.dna", format="interleaved")
#DNA to phyDAT format
mammals_phyDat <- phyDat(mammals, type = "DNA", levels = NULL)
#Compute pairwise distance
dm <- dist.ml(mammals_phyDat, model="JC69")
#NJ tree estimation
mammals_NJ  <- NJ(dm)
#Plot NJ tree
plot(mammals_NJ, main = "Neighbor Joining")
#Write Tree
write.tree(mammals_NJ, file="bootstrap_example.tree")
save.image("C:/Users/RalphArvin/Desktop/work-s2018/mammals/pantheria/June 22/Sec 4b June 22.RData")
setwd("C:/Users/RalphArvin/Desktop/work-s2018/mammals/rscripts")
#install.packages("data.table")
library(data.table)
# For phylogenetic tree manipulation and analysis:
#install.packages("adephylo")
library(adephylo)
#install.packages("ape")
library(ape)
#install.packages("caper")
library(caper)
#install.packages("phytools")
library(phytools)
# For statistical analysis/graphs:
#install.packages("car")
library(car)
#install.packages("plotly")
library(plotly)
#install.packages("Rmisc")
library(Rmisc)
# Load the function(s) designed for this script:
#install.packages("devtools")
library(devtools)
#install_github("helixcn/phylotools")
library(phylotools)
source("GetTraitInfo.R")
source("TestPhyloSig.R")
source("PGLS.R")
source("MergeAndPGLS.R")
#############################################################################################################################
# A phylogenetic tree containing branch length data for your species is required for this section.
# Read in your phylogenetic tree.
mainTree <- read.tree(file = "bootstrap_example.tree")
temp <- 1
while( temp <= length(mainTree$tip.label)){
mainTree$tip.label[temp] <- dfCentroidSeqsNO$species_name[as.numeric(mainTree$tip.label[temp])]
temp = temp + 1;
}
# Root the tree using your chosen outgroup species.
mainTree <- root(mainTree, outgroup = "Tachyglossus aculeatus", resolve.root = T)
### TRAIT: NUMBER OF NODES.
# Match mainTree with data subset. This will ensure the tree has only the tips we need for data analysis.
dfTraits <- dfTraits[match(mainTree$tip.label, dfTraits$species_name), ]
dfTraits[, number_of_nodes := distRoot(mainTree, method = "nNodes")]
### TRAIT: BRANCH LENGTHS.
# Let's calculate the sum of branch lengths now (from root to tip). These values will serve as our measurement of molecular evolution rate.
dfTraits[, branch_length := distRoot(mainTree, method = "patristic")]
# Get info about the branch lengths.
GetTraitInfo(dfTraits$branch_length)
# Range within which 95% of the values fall.
quantile(dfTraits$branch_length, probs = c(.025, .975))
# Take a closer look at branch length outliers. Some contaminated sequences might have STILL gotten through, so it is best to check!
# Using the IQR to detect statistical outliers.
lowerQuantile <- quantile(dfTraits$branch_length)[2]
upperQuantile <- quantile(dfTraits$branch_length)[4]
iqr <- upperQuantile - lowerQuantile
upperThreshold <- (iqr * 3) + upperQuantile
lowerThreshold <-  lowerQuantile - (iqr * 3)
# Extreme short branches.
dfShort <- dfTraits[branch_length < lowerThreshold][, c(1, 17:18)]
# Get the sequence information in case you want to BLAST the sequence (also, we aren't interested in outgroup species here,
# that's why we are using dfCentroidSeqsNO).
dfShort <- merge(dfShort, dfCentroidSeqsNO, by = "species_name")
# Do the same for the extreme long branches.
dfLong <- dfTraits[branch_length > upperThreshold][, c(1, 17:18)]
dfLong <- merge(dfLong, dfCentroidSeqsNO, by = "species_name")
# Remove from dataset, if desired.
dfTraits <- RemoveSequences(dfTraits, c(dfShort$species_name, dfLong$species_name))
### SINGLE VARIABLE REGRESSION ANALYSIS ###
# Running a single variable PGLS regression analysis for each trait to determine whether significance can be detected. If so, they will be included
# in the multivariable regression model selection process.
# First, make sure the trait data and phylo tree match (in case species were removed).
mainTree <- drop.tip(phy = mainTree, tip = mainTree$tip.label[!mainTree$tip.label %in% dfTraits$species_name])
dfTraits <- dfTraits[match(mainTree$tip.label, dfTraits$species_name), ]
### SINGLE-VARIABLE PGLS ANALYSES ###
# Use the PGLS function to perform single-variable (with number of nodes as a control variable) for all of the traits.
# e.g. branch_length ~ trait_of_interest + number_of_nodes
# We will do this by looping through all of the columns containing the trait data using lapply.
traits <- as.list(colnames(dfTraits[, 4:18]))
# Set to dataframe.
dfTraits <- as.data.frame(dfTraits)
singleVarResults <- lapply(traits, function(x) {
# We only want the columns containing species name and dependent and independent variables.
data <- dfTraits[, c("species_name", x, "branch_length", "number_of_nodes")]
# Remove NA values.
data <- data[complete.cases(data), ]
# Perform PGLS. The trait of interest in this case will always be the 2nd column.
caper <- PGLS(data, mainTree, branch_length ~ data[, 2] + number_of_nodes)
# Take the summary of the results.
caperSum <- summary(caper)
})
# A phylogenetic tree containing branch length data for your species is required for this section.
# Read in your phylogenetic tree.
mainTree <- read.tree(file = "final_wholeFishTree.tree")
# A phylogenetic tree containing branch length data for your species is required for this section.
# Read in your phylogenetic tree.
mainTree <- read.tree(file = "bootstrap_example.tree")
temp <- 1
View(mammals_NJ)
load("C:/Users/RalphArvin/Desktop/work-s2018/mammals/pantheria/June 22/Sec 4b June 22.RData")
load("C:/Users/RalphArvin/Desktop/work-s2018/mammals/pantheria/June 22/Sec 4b June 22.RData")
setwd("C:/Users/RalphArvin/Desktop/work-s2018/mammals/rscripts")
#install.packages("data.table")
library(data.table)
# For phylogenetic tree manipulation and analysis:
#install.packages("adephylo")
library(adephylo)
#install.packages("ape")
library(ape)
#install.packages("caper")
library(caper)
#install.packages("phytools")
library(phytools)
# For statistical analysis/graphs:
#install.packages("car")
library(car)
#install.packages("plotly")
library(plotly)
#install.packages("Rmisc")
library(Rmisc)
# Load the function(s) designed for this script:
#install.packages("devtools")
library(devtools)
#install_github("helixcn/phylotools")
library(phylotools)
source("GetTraitInfo.R")
source("TestPhyloSig.R")
source("PGLS.R")
source("MergeAndPGLS.R")
#############################################################################################################################
# A phylogenetic tree containing branch length data for your species is required for this section.
# Read in your phylogenetic tree.
mainTree <- read.tree(file = "bootstrap_example.tree")
temp <- 1
while( temp <= length(mainTree$tip.label)){
mainTree$tip.label[temp] <- dfCentroidSeqsNO$species_name[as.numeric(mainTree$tip.label[temp])]
temp = temp + 1;
}
# Root the tree using your chosen outgroup species.
mainTree <- root(mainTree, outgroup = "Tachyglossus aculeatus", resolve.root = T)
### TRAIT: NUMBER OF NODES.
# Match mainTree with data subset. This will ensure the tree has only the tips we need for data analysis.
dfTraits <- dfTraits[match(mainTree$tip.label, dfTraits$species_name), ]
dfTraits[, number_of_nodes := distRoot(mainTree, method = "nNodes")]
### TRAIT: BRANCH LENGTHS.
# Let's calculate the sum of branch lengths now (from root to tip). These values will serve as our measurement of molecular evolution rate.
dfTraits[, branch_length := distRoot(mainTree, method = "patristic")]
# Get info about the branch lengths.
GetTraitInfo(dfTraits$branch_length)
# Range within which 95% of the values fall.
quantile(dfTraits$branch_length, probs = c(.025, .975))
# Take a closer look at branch length outliers. Some contaminated sequences might have STILL gotten through, so it is best to check!
# Using the IQR to detect statistical outliers.
lowerQuantile <- quantile(dfTraits$branch_length)[2]
upperQuantile <- quantile(dfTraits$branch_length)[4]
iqr <- upperQuantile - lowerQuantile
upperThreshold <- (iqr * 3) + upperQuantile
lowerThreshold <-  lowerQuantile - (iqr * 3)
# Extreme short branches.
dfShort <- dfTraits[branch_length < lowerThreshold][, c(1, 17:18)]
# Get the sequence information in case you want to BLAST the sequence (also, we aren't interested in outgroup species here,
# that's why we are using dfCentroidSeqsNO).
dfShort <- merge(dfShort, dfCentroidSeqsNO, by = "species_name")
# Do the same for the extreme long branches.
dfLong <- dfTraits[branch_length > upperThreshold][, c(1, 17:18)]
dfLong <- merge(dfLong, dfCentroidSeqsNO, by = "species_name")
# Remove from dataset, if desired.
dfTraits <- RemoveSequences(dfTraits, c(dfShort$species_name, dfLong$species_name))
### SINGLE VARIABLE REGRESSION ANALYSIS ###
# Running a single variable PGLS regression analysis for each trait to determine whether significance can be detected. If so, they will be included
# in the multivariable regression model selection process.
# First, make sure the trait data and phylo tree match (in case species were removed).
mainTree <- drop.tip(phy = mainTree, tip = mainTree$tip.label[!mainTree$tip.label %in% dfTraits$species_name])
dfTraits <- dfTraits[match(mainTree$tip.label, dfTraits$species_name), ]
### SINGLE-VARIABLE PGLS ANALYSES ###
# Use the PGLS function to perform single-variable (with number of nodes as a control variable) for all of the traits.
# e.g. branch_length ~ trait_of_interest + number_of_nodes
# We will do this by looping through all of the columns containing the trait data using lapply.
traits <- as.list(colnames(dfTraits[, 4:12]))
# Set to dataframe.
dfTraits <- as.data.frame(dfTraits)
# Start the loop.
singleVarResults <- lapply(traits, function(x) {
# We only want the columns containing species name and dependent and independent variables.
data <- dfTraits[, c("species_name", x, "branch_length", "number_of_nodes")]
# Remove NA values.
data <- data[complete.cases(data), ]
# Perform PGLS. The trait of interest in this case will always be the 2nd column.
caper <- PGLS(data, mainTree, branch_length ~ data[, 2] + number_of_nodes)
# Take the summary of the results.
caperSum <- summary(caper)
})
names(singleVarResults) <- traits
# Which traits have p-values 0.15 or below?
# For now, this is only taking the first p-value of the trait (I still need to change it to deal with multi-level factors).
sigVars <- lapply(singleVarResults, function(x) (x$coefficients[2,4]))
names(sigVars) <- names(singleVarResults)
# Which are below 0.15?
keepVars <- names(which(sigVars <= 0.15))
keepVars <- c("species_name", "branch_length", "number_of_nodes", keepVars)
View(singleVarResults)
singleVarResults[1]
singleVarResults[2]
singleVarResults[3]
singleVarResults[4]
singleVarResults[5]
singleVarResults[6]
singleVarResults[7]
singleVarResults[8]
singleVarResults[9]
singleVarResults[10]
singleVarResults[11]
### MULTIVARIABLE REGRESSION ANALYSES ###
# First, we must find the most complete dataset that we can use for our model selection process. So we will remove traits
# with smaller sample sizes that don't overlap with data from other traits.
# First, get a dataframe of only those traits I am considering.
dfMultivariable <- as.data.table(dfTraits[, keepVars])
# We want the most complete dataset possible given our traits.
# First, order the columns by the amount of missing data (NA values).
dfTraitsNA <- sort(dfMultivariable[, lapply(.SD, function(x) sum(is.na(x)))])
# Reorder the original dfTraits. The columns with the least amount of NA values will now be first.
setcolorder(dfMultivariable, names(dfTraitsNA))
# Now I want to loop through the traits, removing one column (trait) at a time and count the number of complete cases.
# This will provide us some information as to which traits would provide an adequate sample size for downstream analysis.
# First, take the number of columns in dfMultivariable.
len <- ncol(dfMultivariable)
# Create a numeric vector to hold the results of the loop.
all.cc <- NULL
# Start the loop:
for (i in 1:len) {
# Works best if you set dfMultivariable back to a dataframe.
x <- as.data.frame(dfMultivariable)
# x is the placeholder dataframe in the loop.
x <- x[, 1:len]
# Determine which rows are "complete" using the "len" subset of traits.
x <- complete.cases(x)
# Complete rows of data will be "TRUE".
x <- which(x == "TRUE")
# Find the number of complete cases.
x <- length(x)
# Add it to the all.cc variable that's holding all of the results of the loop.
all.cc[i] <- x
# Minus 1 from tempLen so we can check the next subset of traits (we started at the last column because the columns were
# ordered by number of NA values).
len <- len - 1
}
# Now, decide where to cut the datatable. (i.e. pick an adequate subset of
# traits that maximize sample size).
# First, name it according to the trait columns.
names(all.cc) <- rev(colnames(dfMultivariable))
# Look at the results.
all.cc
# What seems like a good cut off point?
len <- which(colnames(dfMultivariable) == "max_length")
dfMultivariableCut <- dfMultivariable[, 1:len]
# What seems like a good cut off point?
len <- which(colnames(dfMultivariable) == "sexualmaturity_age")
dfMultivariableCut <- dfMultivariable[, 1:len]
# Finally, filter the original dfTraits datatable so only complete cases are kept.
dfMultivariableCut <- dfMultivariableCut[complete.cases(dfMultivariableCut)]
# Now check for data variability in this subset so our tests will actually work.
# Examples:
GetTraitInfo(dfMultivariableCut$median_lat)
View(dfTraits)
View(dfMultivariableCut)
# Now check for data variability in this subset so our tests will actually work.
# Examples:
GetTraitInfo(dfMultivariableCut$sexualmaturity_age)
GetTraitInfo(dfMultivariableCut$range_lat)
GetTraitInfo(dfMultivariableCut$body_mass)
View(dfTraits)
# Check for multicollinearity between variables using the variance inflation factor (vif), if desired.
# Multicollinearity can lead to errors in the estimations of our coefficients.
fit <- lm(branch_length ~ sexualmaturity_age + range_lat + body_mass, data = dfMultivariableCut)
vif(mod = fit)
# Now, let's perform a PGLS regression analysis using all of the variables.
# This is our "global" model.
global <- PGLS(dfMultivariableCut, mainTree, branch_length ~ number_of_nodes + sexualmaturity_age + range_lat + body_mass)
# Check that the phylogenetic residuals are normal.
hist(global$phyres)
qqnorm(global$phyres)
qqline(global$phyres)
plot(x = fitted(global), y = global$phyres, pch = 5)
# Remove variables one at a time see if the fit of the model improves.
fit1 <- PGLS(dfMultivariableCut, mainTree, branch_length ~ number_of_nodes + sexualmaturity_age + range_lat)
# Compare the model to the global model using BIC.
BIC(global, fit1)
# Remove another variable.
fit2 <- PGLS(dfMultivariableCut, mainTree, branch_length ~ number_of_nodes + sexualmaturity_age + body_mass)
# Compare the model to the global model using BIC.
BIC(global, fit1, fit2)
# Remove another variable.
fit3 <- PGLS(dfMultivariableCut, mainTree, branch_length ~ number_of_nodes + range_lat + body_mass)
# Compare the model to the global model using BIC.
BIC(global, fit1, fit2, fit3)
summary(fit1)
summary(global)
