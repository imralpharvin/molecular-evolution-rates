sequence = paste(cytB)
dfcytB <- data.frame(seq_name, sequence)
searchTerm <- "cytochrome b[All Fields] AND \"Mammalia\"[Organism]"
numSearch <- 600
searchResult <- entrez_search(db="nuccore", term=searchTerm, retmax=numSearch)
searchResult
tempMin = 1
tempMax = 300
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:tempMax] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n")
while(tempMax != numSearch){
tempMin = tempMin + 300
tempMax = tempMax + 300
if(numSearch <= tempMax ){
tempMax = numSearch
}
#commented out
if(FALSE){
if(tempMin < 798 && tempMax > 798) {
print("stucks")
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:797] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[799: tempMax] ,rettype="fasta")
#write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}else if(tempMax == 798){
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:797] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}
#commented out
}
else{
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:tempMax] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}
}
cytB <- readDNAStringSet("searchSequences.fasta")
seq_name = names(cytB)
sequence = paste(cytB)
dfcytB <- data.frame(seq_name, sequence)
library(ape)
library("Biostrings")
packageVersion("ape")
accessionList <- read.csv("accessionlist.csv")
accessionList <- as.vector(accessionList$accession)
genbankInfo<-read.GenBank(accessionList[1:100],species.names=T)
write.dna(genbankInfo,"cytochromeb.fasta", format="fasta")
cytB <- readDNAStringSet("cytochromeb.fasta")
seq_name = names(cytB)
sequence = paste(cytB)
dfcytB <- data.frame(seq_name, sequence)
####SEARCH TERM####
library(ape)
library("Biostrings")
library (rentrez)
searchTerm <- "cytochrome b[All Fields] AND \"Mammalia\"[Organism]"
numSearch <- 797
searchResult <- entrez_search(db="nuccore", term=searchTerm, retmax=numSearch)
searchResult
tempMin = 1
tempMax = 300
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:tempMax] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n")
while(tempMax != numSearch){
tempMin = tempMin + 300
tempMax = tempMax + 300
if(numSearch <= tempMax ){
tempMax = numSearch
}
#commented out
if(FALSE){
if(tempMin < 798 && tempMax > 798) {
print("stucks")
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:797] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[799: tempMax] ,rettype="fasta")
#write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}else if(tempMax == 798){
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:797] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}
#commented out
}
else{
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:tempMax] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}
}
searchTerm <- "cytochrome b[All Fields] AND \"Mammalia\"[Organism]"
numSearch <- 798
searchResult <- entrez_search(db="nuccore", term=searchTerm, retmax=numSearch)
searchResult
tempMin = 1
tempMax = 300
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:tempMax] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n")
while(tempMax != numSearch){
tempMin = tempMin + 300
tempMax = tempMax + 300
if(numSearch <= tempMax ){
tempMax = numSearch
}
#commented out
if(FALSE){
if(tempMin < 798 && tempMax > 798) {
print("stucks")
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:797] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[799: tempMax] ,rettype="fasta")
#write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}else if(tempMax == 798){
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:797] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}
#commented out
}
else{
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:tempMax] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}
}
searchTerm <- "cytochrome b[All Fields] AND \"Mammalia\"[Organism]"
numSearch <- 1000
searchResult <- entrez_search(db="nuccore", term=searchTerm, retmax=numSearch)
searchResult
tempMin = 1
tempMax = 300
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:tempMax] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n")
while(tempMax != numSearch){
tempMin = tempMin + 300
tempMax = tempMax + 300
if(numSearch <= tempMax ){
tempMax = numSearch
}
#commented out
if(FALSE){
if(tempMin < 798 && tempMax > 798) {
print("stucks")
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:797] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[799: tempMax] ,rettype="fasta")
#write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}else if(tempMax == 798){
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:797] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}
#commented out
}
else{
searchSequences <- entrez_fetch(db="nuccore", id=searchResult$ids[tempMin:tempMax] ,rettype="fasta")
write(searchSequences, "searchSequences.fasta", sep="\n", append = TRUE)
}
}
cytB <- readDNAStringSet("searchSequences.fasta")
seq_name = names(cytB)
sequence = paste(cytB)
dfcytB <- data.frame(seq_name, sequence)
library(bold)
?bold_specimens
load("C:/Users/RalphArvin/Desktop/pantheria/Sec 1 June 14a.RData")
load("C:/Users/RalphArvin/Desktop/pantheria/Sec 1 June 14a.RData")
library(data.table)
# For importing xslx data to data.frame
#install.packages("readxl")
library("readxl")
source("GetTraitSpecificDataBIN.R")
source("GetTraitSpecificData.R")
source("GetTraitInfo.R")
### TRAIT: MEDIAN LATITUDE ###
# Currently, median latitude is the only trait whose information is taken from BOLD. The rest of the data will be obtained from FishBase.
#1. Filtering for presence of a latitude value.
dfLatitudeSpecies <- dfFiltered[grep("[0-9]", lat)]
#2. Convert the latitude (lat) column to number instead of character type
dfLatitudeSpecies[, lat_num := as.numeric(lat)]
#3. Conversion to absolute values before median latitude values are calculated.
dfLatitudeSpecies[, abs_lat_num := abs(lat_num)]
#4. Determine a median latitude for each BIN using absolute values.
dfLatitudeSpecies[, median_lat := median(abs_lat_num), keyby = bin_uri]
#Range
dfLatitudeSpecies[, max_lat := max(lat_num), keyby = bin_uri]
dfLatitudeSpecies[, min_lat := min(lat_num), keyby = bin_uri]
dfLatitudeSpecies[, range_lat := max_lat - min_lat, keyby = bin_uri]
dfLatitudeSpecies <- dfLatitudeSpecies[, !c(14,15,17,18)]
# While considering traits for eventual multivariate analyses, it is necessary for them to have an adequate sample size
# (i.e. over x # rows of data, depending on your purposes). In addition, they should exhibit some amount of variation across the observations.
# Use the GetTraitSpecificDataBIN function to obtain a subset of data for those species that have latitude data available.
#5. Get the trait specific datatable.
dfLatitudeMedian <- setDT(GetTraitSpecificDataBIN(dfLatitudeSpecies, 14))
dfLatitudeRange <- setDT(GetTraitSpecificDataBIN(dfLatitudeSpecies, 15))
setnames(dfLatitudeMedian, "species_label", "species_name")
setnames(dfLatitudeRange, "species_label", "species_name")
#6. Get information for the trait.
GetTraitInfo(dfLatitudeMedian, "median_lat", type = "continuous")
GetTraitInfo(dfLatitudeRange, "range_lat", type = "continuous")
#7. Datatable reorganization for dfFiltered.
dfFiltered <- dfFiltered[, .(bin_uri, filtered_bin_size, recordID, order_name = order_label, family_name = family_label, genus_name = genus_label,
species_name = species_label, nucleotides)]
### TRAIT: PANTHERIA XLSX ###
#1.Reading the data to variable allMammals
rawMammalData <- read_excel("Pantheria.xlsx")
#2.Select traits by column and store it in a vector
selectedTraits <- c("MSW05_Order","MSW05_Family","MSW05_Genus","MSW05_Binomial", "5-1_AdultBodyMass_g","8-1_AdultForearmLen_mm","18-1_BasalMetRate_mLO2hr",  "15-1_LitterSize", "17-1_MaxLongevity_m", "23-1_SexualMaturityAge_d", "10-2_SocialGrpSize","12-1_HabitatBreadth","6-1_DietBreadth", "6-2_TrophicLevel", "1-1_ActivityCycle" )
#3.Filter the original data using the selectedTraits vector as the subset
traitData <- rawMammalData[selectedTraits]
#4.Renaming columns
colnames(traitData) <- c("order", "family", "genus", "species_name", "AdultBodyMass(g)", "AdultForearmLength(mm)", "BasalMetRate(mLO2hr)","LitterSize", "MaxLongevity(months)", "SexualMaturityAge(days)", "SocialGrpSize", "HabitatBreadth", "DietBreadth", "TrophicLevel", "ActivityCycle")
#5.Changing -999 values to NA
traitData[traitData == -999] <- NA
#6 Converting to data table
traitData <- as.data.table(traitData)
traitData <- traitData[,!c(1,2,3)]
#7 Merge Species name
mergedSpecies <- merge(dfFiltered, traitData, by = "species_name")
#7 single row per species
dfFilteredSingle <- dfFiltered[!duplicated(species_name)][, .(bin_uri, species_name, filtered_bin_size)]
load("C:/Users/RalphArvin/Desktop/pantheria/Sec 4 June 15a.RData")
install.packages("ape")
install.packages("phangorn")
install.packages("seqinr")
library(ape)
library(phangorn)
library(seqinr)
library(ape)
library(phangorn)
library(seqinr)
library(ape)
library(phangorn)
library(seqinr)
install.packages("ape")
b
#install.packages("phangorn")
#install.packages("seqinr")
library(ape)
library(phangorn)
#install.packages("phangorn")
#install.packages("seqinr")
library(ape)
#install.packages("ape")
#install.packages("phangorn")
#install.packages("seqinr")
library(ape)
library(phangorn)
library(seqinr)
load("C:/Users/RalphArvin/Desktop/work-s2018/mammals/pantheria/turtle outgroup/Sec 2 June 20c.RData")
# # Copyright (C) 2018 Jacqueline May.
# Program Description: Multivariable analysis of environmental and biological correlates affecting fish molecular evolution rates.
# Contributions & Acknowledgements #
# Dr. Sarah J. Adamowicz and Dr. Zeny Feng for help with designing and structuring the pipeline.
# Centroid sequence selection designed by Matt Orton (https://github.com/m-orton/R-Scripts).
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# There is a copy of the GNU General Public License along with this program in the repository where it is located.
# Or view it directly here at http://www.gnu.org/licenses/
#############################################################################################################################
##### SECTION 3: CENTROID SEQUENCE DETERMINATION #####
# This section is designed to select a centroid sequence for each BIN. A centroid sequence is the sequence in a BIN with minimum sum of pairwise
# distance to all other sequences in the BIN. It will serve as a representative sequence for the BIN/species.
setwd("C:/Users/RalphArvin/Desktop/work-s2018/mammals/rscripts")
### PACKAGES REQUIRED ###
# For data manipulation:
#install.packages("data.table")
library(data.table)
# For multiple sequence alignments:
#install.packages("ape")
library(ape)
#source("https://bioconductor.org/biocLite.R")
#biocLite("Biostrings")
library(Biostrings)
#biocLite("muscle")
library(muscle)
#install.packages("foreach")
library(foreach)
# Load the function(s) designed for this script:
source("RefSeqTrim.R")
#############################################################################################################################
# Subset dataframe to find BINs with more than one sequence.
dfLargeBins <- dfPreCentroid[filtered_bin_size > 1]
# If there is at least one BIN with more than one sequence...
if (nrow(dfLargeBins) > 0) {
# Remove gaps from the sequences.
dfPreCentroid[, nucleotides := gsub("-", "", nucleotides)]
# Subset out the BINs with more than 1 sequence.
dfCentroidSeqs <- dfPreCentroid[bin_uri %in% dfLargeBins$bin_uri]
# We also have to create another separate dataframe with BINs that only have one sequence, called dfSingletons.
dfSingletons <- dfPreCentroid[!bin_uri %in% dfLargeBins$bin_uri]
# We then take the dfCentroidSeqs sequences and group them by BIN.
largeBinList <- split(dfCentroidSeqs, by = "bin_uri")
# Convert all the sequences in largeBinList to DNAStringSet format for
# the multiple sequence alignment.
DNAStringSetList <- lapply(largeBinList, function(x) DNAStringSet(x$nucleotides))
# Name DNAStringSetList using the recordIDs.
for (i in seq(from = 1, to = length(unique(dfCentroidSeqs$bin_uri)), by = 1)) {
names(DNAStringSetList[[i]]) <- largeBinList[[i]]$recordID
}
# Align the sequences in each BIN using MUSCLE.
alignmentList <- lapply(DNAStringSetList, function(x) muscle::muscle(x, diags = TRUE, gapopen = -3000))
# Convert each BIN alignment to DNAbin format.
alignmentList <- lapply(alignmentList, function(x) as.DNAbin(x))
# Estimates the genetic distance between sequences in each BIN with the TN93 model.
distanceMatrixList <- lapply(alignmentList, function(x) dist.dna(x, model = "TN93", as.matrix = TRUE, pairwise.deletion = TRUE))
# Find the centroid sequence using the genetic distance matrix. It is the sequence in a BIN with minimum average pairwise distance to all other sequences in the BIN.
centroidSeqs <- sapply(distanceMatrixList, function(x) which.min(rowSums(x)))
centroidSeqs <- names(centroidSeqs)
centroidSeqs <- gsub("^.*\\.", "", centroidSeqs)
centroidSeqs <- as.numeric(centroidSeqs)
# Subset dfCentroidSeqs by the recordIDs of the centroid sequences.
dfCentroidSeqs <- dfCentroidSeqs[dfCentroidSeqs$recordID %in% centroidSeqs]
# Combine the singletons and centroid sequences into a new dataframe. Now each BIN has a representative sequence.
dfCentroidSeqs <- rbind(dfCentroidSeqs, dfSingletons)
} else {
# Centroid sequence selection not required if all BINs are singletons.
dfCentroidSeqs <- dfPreCentroid
}
# REFERENCE SEQUENCE TRIMMING #
# Trim the centroid sequences according to a standardized reference sequence. Currently, a standard length (658 bp) COI-5P sequence from
# Perca flavescens (yellow perch) is being used to trim Actinopterygii barcode sequences.
# Use the RefSeqTrim function to trim nucleotide sequences in a dataframe according to a given reference sequence.
dfCheckCentroidSeqs <- RefSeqTrim(dfCentroidSeqs)
dfCheckCentroidSeqs[,1:7]<- dfCentroidSeqs[,1:7]
# Remove objects that are not required for Section 4.
rm(alignmentList, centroidSeqs, i); rm(dfPreCentroid, dfLargeBins, dfSingletons); rm(largeBinList, distanceMatrixList, DNAStringSetList)
save.image("C:/Users/RalphArvin/Desktop/work-s2018/mammals/pantheria/turtle outgroup/Sec 3 June20b.RData")
# # Copyright (C) 2018 Jacqueline May.
# Program Description: Multivariable analysis of environmental and biological correlates affecting fish molecular evolution rates.
# Contributions & Acknowledgements #
# Dr. Sarah J. Adamowicz and Dr. Zeny Feng for help with designing and structuring the pipeline.
# Adapted lines from code shared in Stack Overflow discussion:
# Author: https://stackoverflow.com/users/1312519/by0.
# https://stackoverflow.com/questions/12866189/calculating-the-outliers-in-r.
# Author: https://stackoverflow.com/users/2474755/j-r.
# https://stackoverflow.com/questions/27892100/distance-matrix-to-pairwise-distance-list-in-r.
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
# There is a copy of the GNU General Public License along with this program in the repository where it is located.
# Or view it directly here at http://www.gnu.org/licenses/
#############################################################################################################################
##### SECTION 4: ALIGNMENT QUALITY CHECKING #####
# This section performs alignment quality control checking by removing extremely gappy sequences, outliers, and BINs that have neighbours in a
# different taxonomic group (i.e. they may be contaminated or may have been misidentified).
setwd("C:/Users/RalphArvin/Desktop/work-s2018/mammals/rscripts")
### PACKAGES REQUIRED ###
# For data manipulation:
#install.packages("data.table")
library(data.table)
#install.packages(stringr)
library(stringr)
# For multiple sequence alignments:
#install.packages("ape")
library(ape)
#source("https://bioconductor.org/biocLite.R")
#biocLite("Biostrings")
library(Biostrings)
#biocLite("muscle")
library(muscle)
library(foreach)
# Load the function(s) designed for this script:
source("RefSeqTrim.R")
source("RemoveSequences.R")
#############################################################################################################################
### QUALITY CHECK 1: GAPPY SEQUENCES ###
# Here, extremely gappy/ungappy sequences are removed. These sequences are assumed to contribute to misalignment of the
# sequences or may even be pseudogenes. Manual checking of the alignment is recommended.
# Determine the number of positions where an *internal* N or gap is found for each sequence.
dfCheckCentroidSeqs[, internal_gapN := str_count(nucleotides, c("[-+]"))]
# Which sequences are NOT within the range of mean number of gaps in the centroid sequences +/- 7? These represent extremely gappy sequences.
dfGappySeqs <- dfCheckCentroidSeqs[!internal_gapN %between% c(mean(internal_gapN) - 7, mean(internal_gapN) + 7)]
# Make sure outgroups are not included in the dfGappySeqs!
dfGappySeqs <- dfGappySeqs[!species_name %in% outgroups]
# Remove the gappy sequences from the original dfCentroidSeqs as we will be realigning these sequences again once troublesome cases are removed.
dfCentroidSeqs <- RemoveSequences(dfCentroidSeqs, dfGappySeqs$species_name)
### QUALITY CHECK 2: OUTLIERS ###
# Remove centroid sequences whose genetic distances to all other sequences fall outside the typical range of genetic divergence for this group of organisms.
# First, convert the sequences to DNAbin format so we can build a distance matrix.
DNABinNN <- DNAStringSet(dfCheckCentroidSeqs$nucleotides)
names(DNABinNN) <- dfCheckCentroidSeqs$species_name
DNABinNN <- as.DNAbin(DNABinNN)
# Then, we construct a pairwise distance matrix using the TN93 model.
distanceMatrix <- dist.dna(DNABinNN, model = "TN93", as.matrix = TRUE, pairwise.deletion = TRUE)
# Use the upper threshold of the IQR to detect outliers.
lowerQuantile <- quantile(distanceMatrix)[2]
upperQuantile <- quantile(distanceMatrix)[4]
iqr <- upperQuantile - lowerQuantile
upperThreshold <- (iqr * 1.5) + upperQuantile
# Remove 0 values so that these are not considered (when a species is compared to itself - the diagonal values).
distanceMatrix[distanceMatrix == 0] <- NA
# Convert to datatable.
dfOutliers <- as.data.table(distanceMatrix, keep.rownames = T)
# Rename the "rn" column (row names).
setnames(dfOutliers, "rn", "species_name")
# Identify BINs with no relatives within "typical" range of genetic divergence (i.e. all of their genetic distances are greater than 1.5 x IQR upper threshold.)
dfOutliers <- dfOutliers[, outlier := apply(.SD, 1, function(x) all(x > upperThreshold, na.rm = T))][outlier == TRUE]
# Make sure outgroups are not included in the outliers!
dfOutliers <- dfOutliers[!species_name %in% outgroups]
# If desired, remove the outliers from dfCentroidSeqs.
dfCentroidSeqs <- RemoveSequences(dfCentroidSeqs, dfOutliers$species_name)
### QUALITY CHECK 3: CLOSE NEIGHBOUR TAXONOMY ###
# Remove centroid sequences whose close neighbours are in a different order or family. Close neighbours can be determined
# from the distance matrix. They are sequences that are within a genetic distance of 0.05. If these neighbours are in a different
# order or family, this may be indicative of something weird going on in either the sequence data or taxonomic assignment.
dfGeneticDistance <- as.data.table(distanceMatrix)
# Convert the distance matrix to a datatable with the names of the species pairs and their distances.
dfGeneticDistance <- data.table(t(combn(names(dfGeneticDistance), 2)), distance = t(dfGeneticDistance)[lower.tri(dfGeneticDistance)])
setnames(dfGeneticDistance, old = c("V1", "V2"), new = c("species_1", "species_2"))
# Subset out all close neighbour pairings that share a genetic distance under 0.05 to any other sequence.
dfGeneticDistance <- dfGeneticDistance[distance < 0.05]
# Get the order and families names of the species from dfCentroidSeqs.
dfGeneticDistance <- merge(dfGeneticDistance, dfCentroidSeqs[, c(1, 5:6)], by.x = "species_1", by.y = "species_name")
dfGeneticDistance <- merge(dfGeneticDistance, dfCentroidSeqs[, c(1, 5:6)], by.x = "species_2", by.y = "species_name")
setnames(dfGeneticDistance, old = c("order_name.x", "family_name.x", "order_name.y", "family_name.y"),
new = c("order_1", "family_1", "order_2", "family_2"))
# Now, which orders do not match between order_1 and order_2?
dfMismatchOrders <- dfGeneticDistance[order_1 != order_2]
# Remove these species from dfCentroidSeqs if desired:
dfCentroidSeqs <- RemoveSequences(dfCentroidSeqs, c(unique(dfMismatchOrders$species_1), unique(dfMismatchOrders$species_2)))
# Now, which families do not match between family_1 and family_2?
dfMismatchFamilies <- dfGeneticDistance[family_1 != family_2]
# Remove these species from dfCentroidSeqs if desired:
dfCentroidSeqs <- RemoveSequences(dfCentroidSeqs, c(unique(dfMismatchFamilies$species_1), unique(dfMismatchFamilies$species_2)))
### OUTGROUP CHECK ###
# Which outgroups made it pass the filters? Remove them from dfCentroidSeqs to build a tree just using the ingroup
# (so that inclusion of outgroups in the tree building process doesn't affect the branch length estimates of the in-group).
dfGoodOutgroups <- dfCentroidSeqs[dfCentroidSeqs$species_name %in% outgroups]
# Remove the outgroups from dfCentroidSeqs and rename it to indicate that it does not include the outgroup (NO = no outgroup).
dfCentroidSeqsNO <- dfCentroidSeqs[!dfCentroidSeqs$species_name %in% outgroups]
# Now, re-trim and align the sequences without the outgroups.
dfCentroidSeqsNO <- RefSeqTrim(dfCentroidSeqsNO)
# Once finished, make sure to check over sequences/alignment, and make sure they are in the correct reading frame.
# Make sure to save the resulting alignments under a different name, or save in a new directory so they are not replaced.
# Now re-run the alignment including outgroups (pick outgroup species that are well represented and that serve as an appropriate
# outgroup to your taxa).
# Rename dfCentroidSeqs to indicate that it includes the outgroup (WO = with outgroup.)
dfCentroidSeqsWO <- dfCentroidSeqs
# Run the alignment with outgroups included.
dfCentroidSeqsWO <- RefSeqTrim(dfCentroidSeqsWO)
# Remove objects that are not required for Section 5.
rm(DNABinNN, first_time, iqr, lowerQuantile, upperQuantile, upperThreshold, distanceMatrix)
rm(dfCentroidSeqs, dfCheckCentroidSeqs, dfGappySeqs, dfGeneticDistance, dfOutliers, dfMismatchOrders, dfMismatchFamilies, dfGoodOutgroups)
View(dfCentroidSeqsWO)
setwd("C:/Users/RalphArvin/Desktop/work-s2018/mammals/rscripts")
#install.packages("data.table")
library(data.table)
# For phylogenetic tree manipulation and analysis:
#install.packages("adephylo")
library(adephylo)
load("C:/Users/RalphArvin/Desktop/work-s2018/mammals/pantheria/turtle outgroup/Sec 4 June 20a.RData")
setwd("C:/Users/RalphArvin/Desktop/work-s2018/mammals/rscripts")
#install.packages("data.table")
library(data.table)
# For phylogenetic tree manipulation and analysis:
#install.packages("adephylo")
library(adephylo)
#install.packages("ape")
library(ape)
#install.packages("caper")
library(caper)
#install.packages("phytools")
library(phytools)
# For statistical analysis/graphs:
#install.packages("car")
library(car)
#install.packages("plotly")
library(plotly)
#install.packages("Rmisc")
library(Rmisc)
# Load the function(s) designed for this script:
#install.packages("devtools")
library(devtools)
#install_github("helixcn/phylotools")
library(phylotools)
source("GetTraitInfo.R")
source("TestPhyloSig.R")
source("PGLS.R")
source("MergeAndPGLS.R")
mainTree <- read.tree(file = "bootstrap_example.tree")
temp <- 1
while( temp <= length(mainTree$tip.label)){
mainTree$tip.label[temp] <- dfCentroidSeqsNO$species_name[as.numeric(mainTree$tip.label[temp])]
temp = temp + 1;
}
# Root the tree using your chosen outgroup species.
mainTree <- root(mainTree, outgroup = "Tachyglossus aculeatus", resolve.root = T)
load("C:/Users/RalphArvin/Desktop/work-s2018/mammals/pantheria/turtle outgroup/Sec 4 June 19b.RData")
mainTree <- read.tree(file = "bootstrap_example.tree")
temp <- 1
while( temp <= length(mainTree$tip.label)){
mainTree$tip.label[temp] <- dfCentroidSeqsNO$species_name[as.numeric(mainTree$tip.label[temp])]
temp = temp + 1;
}
# Root the tree using your chosen outgroup species.
mainTree <- root(mainTree, outgroup = "Tachyglossus aculeatus", resolve.root = T)
View(mainTree)
View(mainTree)
View(dfTraits)
View(dfCentroidSeqsNO)
dfTraits <- dfTraits[match(mainTree$tip.label, dfTraits$species_name), ]
dfTraits[, number_of_nodes := distRoot(mainTree, method = "nNodes")]
### TRAIT: BRANCH LENGTHS.
# Let's calculate the sum of branch lengths now (from root to tip). These values will serve as our measurement of molecular evolution rate.
dfTraits[, branch_length := distRoot(mainTree, method = "patristic")]
# Get info about the branch lengths.
GetTraitInfo(dfTraits$branch_length)
# Range within which 95% of the values fall.
quantile(dfTraits$branch_length, probs = c(.025, .975))
View(mainTree)
mainTree[["tip.label"]]
?ape
is.rooted.phylo(mainTree)
View(dfTraits)
